// import React, { useState, useEffect, useRef } from 'react';
// import axios from 'axios';

// function Cfvbs({ selectedFacture }) {
//   const [clName, setClName] = useState('Comptoir');
//   const [client_id, setClientCode] = useState('13');
//   const [date, setDate] = useState('');
//   const [DT, setDT] = useState('1.000');
//   const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);
//   const [references, setReferences] = useState([]);
//   const [filteredClients, setFilteredClients] = useState([]);

//   const remiseInputRef = useRef(null);

//   useEffect(() => {
//     axios.get('http://localhost:7777/article')
//       .then(res => {
//         setReferences(res.data.map(article => article.ref));
//       })
//       .catch(err => console.log('Error fetching articles:', err));
//   }, []);

//   useEffect(() => {
//     if (selectedFacture) {
//       console.log('Selected Facture in CreateFactureVente:', selectedFacture);
//       setClName(selectedFacture.clName || '');
//       setClientCode(selectedFacture.client_id || '');
//       setDate(selectedFacture.date || '');
//       setDT(selectedFacture.DT || '1.000');
//       setInputs(selectedFacture.articles || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);
//     }
//   }, [selectedFacture]);

//   const fetchPriceByReference = (reference, index) => {
//     axios.get(`http://localhost:7777/cfvbs/${reference}`)
//       .then(res => {
//         const price = res.data.price;
//         const newInputs = [...inputs];
//         newInputs[index].price = price;
//         setInputs(newInputs);
//       })
//       .catch(err => console.log('Error fetching price:', err));
//   };

//   const handleReferenceChange = (event, index) => {
//     const { value } = event.target;
//     const newInputs = [...inputs];
//     newInputs[index].refAr = value;
//     setInputs(newInputs);
//     fetchPriceByReference(value, index);
//   };

//   const handleRemiseChange = (event, index) => {
//     const { value } = event.target;
//     const newInputs = [...inputs];
//     newInputs[index].remise = value;
//     setInputs(newInputs);
//   };


//   const handleQuantityChange = (event, index) => {
//     const { value } = event.target;
//     const newInputs = [...inputs];
//     newInputs[index].quantité = value;
  

//     if (!isNaN(value) && value !== '') {
//       axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)
//         .then(res => {
//           const availableQuantity = res.data.quantity;
//           const remainingQuantity = availableQuantity - parseInt(value);
  
//           if (remainingQuantity < 0) {
//             alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);
//             newInputs[index].quantité = availableQuantity; 
//     }
  
//           setInputs(newInputs);
//         })
//         .catch(err => console.error('Error fetching quantity:', err));
//     } else {
//       alert('Veuillez entrer une quantité valide.');
//     }
//   };
  

//   const handleAddInput = () => {
//     const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');
//     if (isEmpty) {
//       alert("Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.");
//       return;
//     }
//     setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);
//   };

  // const calculateTotal = () => {
  //   if (!inputs) return 0;
  //   const total = inputs.reduce((acc, curr) => acc + (curr.price * curr.quantité) * (1 - (curr.remise / 100)), 0) + parseFloat(DT);
  //   return total.toFixed(3);
  // };

  // const updateStock = async (inputs) => {
  //   try {
  //     for (const input of inputs) {
  //       if (!isNaN(input.quantité) && input.quantité !== '') {
  //         const response = await axios.put(`http://localhost:7777/article/${input.refAr}/updateStock`, { quantity: input.quantité });
  //         console.log(`Stock updated for ${input.refAr}:`, response.data);
  //       }
  //     }
  //   } catch (error) {
  //     console.error('Error updating stock:', error);
  //   }
  // };
  
  
  
//   const handleSubmit = async (event) => {
//     event.preventDefault();
  
//     const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');
//     const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));
  
//     if (invalidReference) {
//       alert("Sélectionner une référence valide");
//       return;
//     }
  
//     const refArArray = nonEmptyInputs.map(input => ({
//       refAr: input.refAr,
//       price: input.price,
//       quantité: input.quantité,
//       remise: input.remise
//     }));
  
//     const totalPrice = calculateTotal();
//     try {
//       console.log('Submitting data:', {
//         clName,
//         client_id,
//         date,
//         DT,
//         refAr: refArArray,
//         totalPrice
//       });
  
//       const res = await axios.post('http://localhost:7777/cfvbs/', {
//         clName,
//         client_id,
//         date,
//         DT,
//         refAr: refArArray,
//         totalPrice
//       });
//       console.log('Response:', res.data);
//       await updateStock(refArArray);
//       window.location.reload();
//     } catch (err) {
//       console.error('Error creating facture:', err.response ? err.response.data : err);
//     }
//   };

  

//   const handleKeyPress = (event) => {
//     if (event.key === 'Enter') {
//       handleAddInput();
//     }
//   };

//   const handleClientSelect = (name, code) => {
//     setClName(name);
//     setClientCode(code);
//     setFilteredClients([]);
//   };

//   const handleClientChange = (e) => {
//     const { value } = e.target;
//     setClName(value);

//     axios.get(`http://localhost:7777/clients/search?name=${value}`)
//       .then(res => {
//         setFilteredClients(res.data);
//       })
//       .catch(err => console.log('Error fetching clients:', err));

//     axios.get(`http://localhost:7777/clients/search?name=${value}`)
//       .then(res => {
//         if (res.data.length > 0) {
//           setClientCode(res.data[0].clID);
//         } else {
//           setClientCode('');
//         }
//       })
//       .catch(err => console.log('Error fetching client code:', err));
//   };

//   const handleClientBlur = () => {
//     setFilteredClients([]);
//   };

//   const handleClientCodeChange = (e) => {
//     const { value } = e.target;
//     setClientCode(value);

//     axios.get(`http://localhost:7777/clients/search?id=${value}`)
//       .then(res => {
//         if (res.data.length > 0) {
//           setClName(res.data[0].clName);
//         } else {
//           setClName('');
//         }
//       })
//       .catch(err => console.log('Error fetching client name:', err));
//   };

//   const handleUpdate = async (event) => {
//     event.preventDefault();
  
//     const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');
//     const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));
  
//     if (invalidReference) {
//       alert("Sélectionner une référence valide");
//       return;
//     }
  
//     const refArArray = nonEmptyInputs.map(input => ({
//       refAr: input.refAr,
//       price: input.price,
//       quantité: input.quantité,
//       remise: input.remise
//     }));
  
//     const totalPrice = calculateTotal();
//     try {
//       const res = await axios.put(`http://localhost:7777/cfvbs/update/${selectedFacture.id}`, {
//         clName,
//         client_id,
//         date,
//         DT,
//         articles: refArArray,
//         totalPrice
//       });
//       console.log(res.data);
//       await updateStock(refArArray);
//       window.location.reload();
//     } catch (err) {
//       console.log('Error updating facture:', err);
//     }
//   };
//   const handleClear = () => {
//     setClName('');
//     setClientCode('');
//     setDate('');
//     setDT('1.000');
//     setInputs([{ refAr: '', quantité: '', price: 0, remise: 0 }]);
//   };
  
//   return (
//     <div style={{ margin: '20px', justifyContent: 'center' }}>
//       <div style={{ display: 'flex', flex: '1' }}>
//         <div>
//           <div style={{ marginBottom: '20px' }}>
//             <label style={{ width: '120px' }} htmlFor="code-client">Code client:</label>
//             <input
//               style={{ width: '200px' }}
//               type="text"
//               id="code-client"
//               name="code-client"
//               value={client_id}
//               onChange={handleClientCodeChange}
//             />
//           </div>
//           <div style={{ marginBottom: '20px', position: 'relative' }}>
//             <label style={{ width: '120px' }} htmlFor="client">Nom du client</label>
//             <input
//               style={{ width: '200px' }}
//               type="text"
//               id="client"
//               value={clName}
//               onChange={handleClientChange}
//               onBlur={handleClientBlur}
//             />
//             {filteredClients.length > 0 && (
//               <div style={{ position: 'absolute', top: '100%', left: 0, backgroundColor: 'white', border: '1px solid #ccc', width: '100%' }}>
//                 {filteredClients.map((client, index) => (
//                   <div key={index} style={{ padding: '5px', cursor: 'pointer' }} onClick={() => handleClientSelect(client.clName, client.clID)}>
//                     {client.clName}
//                   </div>
//                 ))}
//               </div>
//             )}
//           </div>
//           <div style={{ marginBottom: '20px' }}>
//             <label style={{ width: '120px' }} htmlFor="date">Date</label>
//             <input
//               style={{ width: '200px' }}
//               type="date"
//               id="date"
//               value={date}
//               onChange={(e) => setDate(e.target.value)}
//             />
//           </div>
//           <div style={{ marginBottom: '20px' }}>
//             <label style={{ width: '120px' }} htmlFor="DT">Droit de timbre</label>
//             <input
//               style={{ width: '200px' }}
//               type="text"
//               id="DT"
//               value={DT}
//               onChange={(e) => setDT(e.target.value)}
//             />
//           </div>
//         </div>
//         <div>
//           {inputs.map((input, index) => (
//             <div key={index} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>
//               <div style={{ flex: '1', marginRight: '10px' }}>
//                 <label>Référence d'article</label>
//                 <input
//                   list="references"
//                   style={{ width: '100%' }}
//                   value={input.refAr}
//                   onChange={(e) => handleReferenceChange(e, index)}
//                 />
//                 <datalist id="references">
//                   {references.map((reference, idx) => (
//                     <option key={idx} value={reference} />
//                   ))}
//                 </datalist>
//               </div>
//               <div style={{ flex: '1', marginRight: '10px' }}>
//                 <label>Prix vente TTC</label>
//                 <input
//                   type="number"
//                   style={{ width: '100%' }}
//                   value={input.price}
//                   readOnly
//                 />
//               </div>
//               <div style={{ flex: '1', marginRight: '10px' }}>
//                 <label>Quantité</label>
//                 <input
//                   type="number"
//                   style={{ width: '100%' }}
//                   value={input.quantité}
//                   onChange={(e) => handleQuantityChange(e, index)}
//                 />
//               </div>
//               <div style={{ display: 'flex', alignItems: 'center' }}>
//                 <div style={{ flex: '1' }}>
//                   <label>Remise</label>
//                   <input
//                     type="number"
//                     style={{ width: '100%' }}
//                     value={input.remise}
//                     onChange={(e) => handleRemiseChange(e, index)}
//                     onKeyDown={handleKeyPress}
//                     ref={remiseInputRef}
//                   />
//                 </div>
//                 <div style={{ marginLeft: '10px' }}>
//                   <button type="button" onClick={handleAddInput}>+</button>
//                 </div>
//               </div>
//             </div>
//           ))}
//         </div>
//         <div>
//           <div style={{ display: "inline-block", marginBottom: '20px', textAlign: 'center' }}>
//             <button
//               style={{ width: '200px', marginBottom: '10px' }}
//               type="button"
//               onClick={handleSubmit}
//             >
//               Ajouter
//             </button>
//             <button
//               style={{ width: '200px', marginBottom: '10px' }}
//               type="submit"
//               onClick={handleUpdate}
//             >
//               {selectedFacture ? 'Mettre à jour' : 'Enregistrer'}
//             </button><br />
//             <button
//               style={{ width: '200px', marginBottom: '10px' }}
//               type="button"
//               onClick={handleClear}
//             >
//               Vider les champs
//             </button>
//           </div>
//         </div>
//       </div>
//       <div style={{ marginBottom: '20px' }}>
//         <label>Total</label>
//         <input
//         style={{ width: '100%' }}
//         value={calculateTotal()}
//         readOnly
//       />
//       </div>
//     </div>
//   );
// }

// export default Cfvbs;























FVBS:
// import React, { useState, useEffect } from 'react';
// import axios from 'axios';
// import Modal from 'react-modal';
// import Cfvbs from './Cfvbs';
// import { FaSearch } from 'react-icons/fa';

// Modal.setAppElement('#root');

// function Fvbs() {
//   const [fVente, setFVente] = useState([]);
//   const [selectedFacture, setSelectedFacture] = useState(null);
//   const [selectedRow, setSelectedRow] = useState(null);
//   const [searchQuery, setSearchQuery] = useState('');
//   const [modalIsOpen, setModalIsOpen] = useState(false);

//   useEffect(() => {
//     axios
//       .get('http://localhost:7777/fvbs/')
//       .then((res) => {
//         console.log(res.data);
//         const formattedFVente = res.data.map((facture) => {
//           const date = new Date(facture.date);
//           const formattedDate = date.toISOString().split('T')[0]; 
//           return {
//             ...facture,
//             date: formattedDate,
//           };
//         });
//         setFVente(formattedFVente);
//       })
//       .catch((err) => console.log(err));
//   }, []);
  

//   const handleDelete = async () => {
//     const id = selectedFacture?.id;
//     if (!id) return;
//     try {
//       await axios.delete(`http://localhost:7777/factureVente/${id}`);
//       setFVente(fVente.filter((facture) => facture.id !== id));
//       setSelectedFacture(null); 
//       setSelectedRow(null);
//     } catch (err) {
//       console.log(err);
//     }
//   };

//   const handleAddFactureVente = (newFactureVente) => {
//     setFVente([...fVente, newFactureVente]);
//   };

//   const filteredFVente = fVente.filter((facture) => {
//     return (
//       facture.clName?.toLowerCase()?.includes(searchQuery.toLowerCase()) ||
//       facture.articles.some(article => article.refAr.toLowerCase().includes(searchQuery.toLowerCase()))
//     );
//   });

//   const handleSearch = (query) => {
//     setSearchQuery(query);
//   };

//   const handleSubmit = (newFactureData) => {
//     axios.post('http://localhost:7777/cfvbs/', newFactureData)
//       .then(res => {
//         console.log(res);
//         setModalIsOpen(false); 
//         setFVente([...fVente, res.data]); 
//       })
//       .catch(err => console.log('Error creating facture:', err));
//   };

//   return (
//     <div className="facture-vente-container">
//       <Cfvbs onFactureSubmit={handleSubmit} selectedFacture={selectedFacture} />
//       <button onClick={() => setModalIsOpen(true)}>Voir les factures de vente</button>
//       <Modal
//         isOpen={modalIsOpen}
//         onRequestClose={() => setModalIsOpen(false)}
//         contentLabel="Voir les factures de vente"
//         style={{
//           content: {
//             top: '50%',
//             left: '50%',
//             right: 'auto',
//             bottom: 'auto',
//             marginRight: '-50%',
//             transform: 'translate(-50%, -50%)',
//             width: '80%',
//             maxWidth: '800px',
//             maxHeight: '80vh',
//             overflowY: 'auto',
//           },
//         }}
//       >
//         <div className="d-flex justify-content-between align-items-center mb-3">
//           <h2 className="mb-4">Factures de vente :</h2>
//           <div className="input-group">
//             <input
//               type="text"
//               className="form-control"
//               placeholder="Rechercher un client ou une référence..."
//               value={searchQuery}
//               onChange={(e) => handleSearch(e.target.value)}
//             />
//             <span className="input-group-text">
//               <FaSearch />
//             </span>
//           </div>
//         </div>
//         <button onClick={handleDelete}>Supprimer</button>
//         <div className="table-responsive">
//           <table className="table table-striped">
//             <thead>
//               <tr>
//                 <th>Id</th>
//                 <th>Code client</th>
//                 <th>Nom du client</th>
//                 <th>Articles</th>
//                 <th>Total</th>
//               </tr>
//             </thead>
//             <tbody>
//                 {filteredFVente.map((facture, index) => (
//                   <tr
//                     key={facture.id}
//                     onClick={() => {
//                       console.log('Selected Facture:', facture); 
//                       setSelectedFacture(facture);
//                       setSelectedRow(index);
//                     }}
//                     className={selectedRow === index ? 'table-active' : ''}
//                     style={{ cursor: 'pointer' }}
//                   >
//                     <td>{facture.id}</td>
//                     <td>{facture.client_id}</td>
//                     <td>{facture.clName}</td>
//                     <td>
//                       {facture.articles.map((article, i) => (
//                         <span key={i}>
//                           {`${article.refAr}: ${article.quantité} | `}
//                         </span>
//                       ))}
//                     </td>
//                     <td>{facture.totalPrice}</td>
//                   </tr>
//                 ))}
//               </tbody>

//           </table>
//         </div>
//       </Modal>
//     </div>
//   );
// }

// export default Fvbs;