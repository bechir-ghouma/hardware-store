{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import axios from 'axios';\n\n// function CreateFactureAchat({ selectedFacture }) {\n//   const [clName, setClName] = useState('');\n//   const [client_id, setClientCode] = useState('');\n//   const [date, setDate] = useState('');\n//   const [DT, setDT] = useState('1.000');\n//   const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//   const [references, setReferences] = useState([]);\n//   const [filteredClients, setFilteredClients] = useState([]);\n\n//   const remiseInputRef = useRef(null);\n\n//   useEffect(() => {\n//     axios.get('http://localhost:7777/article')\n//       .then(res => {\n//         setReferences(res.data.map(article => article.ref));\n//       })\n//       .catch(err => console.log('Error fetching articles:', err));\n//   }, []);\n\n//   useEffect(() => {\n//     if (selectedFacture) {\n//       console.log('Selected Facture in CreateFactureAchat:', selectedFacture);\n//       setClName(selectedFacture.clName || '');\n//       setClientCode(selectedFacture.client_id || '');\n//       setDate(selectedFacture.date || '');\n//       setDT(selectedFacture.DT || '1.000');\n//       setInputs(selectedFacture.articles || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//     }\n//   }, [selectedFacture]);\n\n//   const fetchPriceByReference = (reference, index) => {\n//     axios.get(`http://localhost:7777/factureAchat/${reference}`)\n//       .then(res => {\n//         const price = res.data.price;\n//         const newInputs = [...inputs];\n//         newInputs[index].price = price;\n//         setInputs(newInputs);\n//       })\n//       .catch(err => console.log('Error fetching price:', err));\n//   };\n\n//   const handleReferenceChange = (event, index) => {\n//     const { value } = event.target;\n//     const newInputs = [...inputs];\n//     newInputs[index].refAr = value;\n//     setInputs(newInputs);\n//     fetchPriceByReference(value, index);\n//   };\n\n//   const handleRemiseChange = (event, index) => {\n//     const { value } = event.target;\n//     const newInputs = [...inputs];\n//     newInputs[index].remise = value;\n//     setInputs(newInputs);\n//   };\n\n//   const handleQuantityChange = (event, index) => {\n//     const { value } = event.target;\n//     const newInputs = [...inputs];\n//     newInputs[index].quantité = value;\n\n//     // Check if value is a valid number\n//     if (!isNaN(value) && value !== '') {\n//       axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)\n//         .then(res => {\n//           const availableQuantity = res.data.quantity;\n//           const remainingQuantity = availableQuantity - parseInt(value);\n\n//           if (remainingQuantity < 0) {\n//             alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);\n//             newInputs[index].quantité = availableQuantity; // Setting the input quantity to available quantity\n//           }\n\n//           setInputs(newInputs);\n//         })\n//         .catch(err => console.error('Error fetching quantity:', err));\n//     } else {\n//       setInputs(newInputs);\n//     }\n//   };\n\n//   const handleDTChange = (event) => {\n//     const value = event.target.value;\n//     const validValue = value.match(/^\\d*(\\.\\d{0,3})?$/); // Regex to allow up to three decimal places\n//     if (validValue) {\n//       setDT(value);\n//     }\n//   };\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n\n//     const formattedInputs = inputs.map(input => ({\n//       ...input,\n//       quantité: parseFloat(input.quantité),\n//       price: parseFloat(input.price),\n//       remise: parseFloat(input.remise)\n//     }));\n\n//     const data = {\n//       clName,\n//       client_id,\n//       date,\n//       DT,\n//       articles: formattedInputs,\n//       totalPrice: calculateTotalPrice()\n//     };\n\n//     axios.post('http://localhost:7777/factureAchat', data)\n//       .then(response => {\n//         console.log(response.data);\n//         // Reset form fields after successful submission\n//         setClName('');\n//         setClientCode('');\n//         setDate('');\n//         setDT('1.000');\n//         setInputs([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//       })\n//       .catch(error => {\n//         console.error('There was an error!', error);\n//       });\n//   };\n\n//   const addInput = () => {\n//     setInputs([...inputs, { refAr: '', quantité: '', price: 0, remise: 0 }]);\n//   };\n\n//   const calculateTotalPrice = () => {\n//     let total = 0;\n//     inputs.forEach(input => {\n//       const itemTotal = input.quantité * input.price * DT * (1 - input.remise / 100);\n//       total += itemTotal;\n//     });\n//     return total.toFixed(3);\n//   };\n\n//   const handleClientChange = async (e) => {\n//     const value = e.target.value;\n//     setClName(value);\n\n//     if (value.trim() === '') {\n//       setFilteredClients([]);\n//       return;\n//     }\n\n//     try {\n//       const response = await axios.get('http://localhost:7777/clients');\n//       const clients = response.data;\n//       const filtered = clients.filter(client =>\n//         client.nom && client.nom.toLowerCase().includes(value.toLowerCase())\n//       );\n//       setFilteredClients(filtered);\n//     } catch (error) {\n//       console.error('Error fetching clients:', error);\n//       setFilteredClients([]);\n//     }\n//   };\n\n//   const handleClientSelect = (client) => {\n//     setClName(client.nom);\n//     setClientCode(client.id);\n//     setFilteredClients([]);\n//   };\n\n//   return (\n//     <div className=\"container mt-4\">\n//       <form onSubmit={handleSubmit} className=\"form-container\">\n//         <div className=\"form-group\">\n//           <label>Nom du client:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={clName}\n//             onChange={handleClientChange}\n//             required\n//           />\n//           {filteredClients.length > 0 && (\n//             <div className=\"autocomplete-dropdown\">\n//               {filteredClients.map(client => (\n//                 <div\n//                   key={client.id}\n//                   onClick={() => handleClientSelect(client)}\n//                   className=\"autocomplete-item\"\n//                 >\n//                   {client.nom}\n//                 </div>\n//               ))}\n//             </div>\n//           )}\n//         </div>\n//         <div className=\"form-group\">\n//           <label>Client Code:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={client_id}\n//             onChange={(e) => setClientCode(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group\">\n//           <label>Date:</label>\n//           <input\n//             type=\"date\"\n//             className=\"form-control\"\n//             value={date}\n//             onChange={(e) => setDate(e.target.value)}\n//             required\n//           />\n//         </div>\n//         <div className=\"form-group\">\n//           <label>DT:</label>\n//           <input\n//             type=\"text\"\n//             className=\"form-control\"\n//             value={DT}\n//             onChange={handleDTChange}\n//             required\n//           />\n//         </div>\n//         {inputs.map((input, index) => (\n//           <div key={index} className=\"form-group\">\n//             <label>Référence de l'article:</label>\n//             <select\n//               className=\"form-control\"\n//               value={input.refAr}\n//               onChange={(event) => handleReferenceChange(event, index)}\n//               required\n//             >\n//               <option value=\"\">Choisir une référence</option>\n//               {references.map(reference => (\n//                 <option key={reference} value={reference}>\n//                   {reference}\n//                 </option>\n//               ))}\n//             </select>\n//             <label>Quantité:</label>\n//             <input\n//               type=\"number\"\n//               className=\"form-control\"\n//               value={input.quantité}\n//               onChange={(event) => handleQuantityChange(event, index)}\n//               required\n//             />\n//             <label>Prix:</label>\n//             <input\n//               type=\"number\"\n//               className=\"form-control\"\n//               value={input.price}\n//               readOnly\n//             />\n//             <label>Remise (%):</label>\n//             <input\n//               type=\"number\"\n//               className=\"form-control\"\n//               value={input.remise}\n//               ref={remiseInputRef}\n//               onChange={(event) => handleRemiseChange(event, index)}\n//             />\n//           </div>\n//         ))}\n//         <button type=\"button\" className=\"btn btn-secondary\" onClick={addInput}>\n//           Ajouter un article\n//         </button>\n//         <button type=\"submit\" className=\"btn btn-primary\">\n//           Enregistrer\n//         </button>\n//         <div className=\"mt-3\">\n//           <h5>Prix Total: {calculateTotalPrice()} DT</h5>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default CreateFactureAchat;","map":{"version":3,"names":[],"sources":["C:/Users/Dell/OneDrive/Bureau/quincaillerie/frontend/src/CreateFactureAchat.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import axios from 'axios';\r\n\r\n// function CreateFactureAchat({ selectedFacture }) {\r\n//   const [clName, setClName] = useState('');\r\n//   const [client_id, setClientCode] = useState('');\r\n//   const [date, setDate] = useState('');\r\n//   const [DT, setDT] = useState('1.000');\r\n//   const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//   const [references, setReferences] = useState([]);\r\n//   const [filteredClients, setFilteredClients] = useState([]);\r\n\r\n//   const remiseInputRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:7777/article')\r\n//       .then(res => {\r\n//         setReferences(res.data.map(article => article.ref));\r\n//       })\r\n//       .catch(err => console.log('Error fetching articles:', err));\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     if (selectedFacture) {\r\n//       console.log('Selected Facture in CreateFactureAchat:', selectedFacture);\r\n//       setClName(selectedFacture.clName || '');\r\n//       setClientCode(selectedFacture.client_id || '');\r\n//       setDate(selectedFacture.date || '');\r\n//       setDT(selectedFacture.DT || '1.000');\r\n//       setInputs(selectedFacture.articles || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//     }\r\n//   }, [selectedFacture]);\r\n\r\n//   const fetchPriceByReference = (reference, index) => {\r\n//     axios.get(`http://localhost:7777/factureAchat/${reference}`)\r\n//       .then(res => {\r\n//         const price = res.data.price;\r\n//         const newInputs = [...inputs];\r\n//         newInputs[index].price = price;\r\n//         setInputs(newInputs);\r\n//       })\r\n//       .catch(err => console.log('Error fetching price:', err));\r\n//   };\r\n\r\n//   const handleReferenceChange = (event, index) => {\r\n//     const { value } = event.target;\r\n//     const newInputs = [...inputs];\r\n//     newInputs[index].refAr = value;\r\n//     setInputs(newInputs);\r\n//     fetchPriceByReference(value, index);\r\n//   };\r\n\r\n//   const handleRemiseChange = (event, index) => {\r\n//     const { value } = event.target;\r\n//     const newInputs = [...inputs];\r\n//     newInputs[index].remise = value;\r\n//     setInputs(newInputs);\r\n//   };\r\n\r\n//   const handleQuantityChange = (event, index) => {\r\n//     const { value } = event.target;\r\n//     const newInputs = [...inputs];\r\n//     newInputs[index].quantité = value;\r\n  \r\n//     // Check if value is a valid number\r\n//     if (!isNaN(value) && value !== '') {\r\n//       axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)\r\n//         .then(res => {\r\n//           const availableQuantity = res.data.quantity;\r\n//           const remainingQuantity = availableQuantity - parseInt(value);\r\n  \r\n//           if (remainingQuantity < 0) {\r\n//             alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);\r\n//             newInputs[index].quantité = availableQuantity; // Setting the input quantity to available quantity\r\n//           }\r\n  \r\n//           setInputs(newInputs);\r\n//         })\r\n//         .catch(err => console.error('Error fetching quantity:', err));\r\n//     } else {\r\n//       setInputs(newInputs);\r\n//     }\r\n//   };\r\n\r\n//   const handleDTChange = (event) => {\r\n//     const value = event.target.value;\r\n//     const validValue = value.match(/^\\d*(\\.\\d{0,3})?$/); // Regex to allow up to three decimal places\r\n//     if (validValue) {\r\n//       setDT(value);\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n\r\n//     const formattedInputs = inputs.map(input => ({\r\n//       ...input,\r\n//       quantité: parseFloat(input.quantité),\r\n//       price: parseFloat(input.price),\r\n//       remise: parseFloat(input.remise)\r\n//     }));\r\n\r\n//     const data = {\r\n//       clName,\r\n//       client_id,\r\n//       date,\r\n//       DT,\r\n//       articles: formattedInputs,\r\n//       totalPrice: calculateTotalPrice()\r\n//     };\r\n\r\n//     axios.post('http://localhost:7777/factureAchat', data)\r\n//       .then(response => {\r\n//         console.log(response.data);\r\n//         // Reset form fields after successful submission\r\n//         setClName('');\r\n//         setClientCode('');\r\n//         setDate('');\r\n//         setDT('1.000');\r\n//         setInputs([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//       })\r\n//       .catch(error => {\r\n//         console.error('There was an error!', error);\r\n//       });\r\n//   };\r\n\r\n//   const addInput = () => {\r\n//     setInputs([...inputs, { refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//   };\r\n\r\n//   const calculateTotalPrice = () => {\r\n//     let total = 0;\r\n//     inputs.forEach(input => {\r\n//       const itemTotal = input.quantité * input.price * DT * (1 - input.remise / 100);\r\n//       total += itemTotal;\r\n//     });\r\n//     return total.toFixed(3);\r\n//   };\r\n\r\n//   const handleClientChange = async (e) => {\r\n//     const value = e.target.value;\r\n//     setClName(value);\r\n\r\n//     if (value.trim() === '') {\r\n//       setFilteredClients([]);\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const response = await axios.get('http://localhost:7777/clients');\r\n//       const clients = response.data;\r\n//       const filtered = clients.filter(client =>\r\n//         client.nom && client.nom.toLowerCase().includes(value.toLowerCase())\r\n//       );\r\n//       setFilteredClients(filtered);\r\n//     } catch (error) {\r\n//       console.error('Error fetching clients:', error);\r\n//       setFilteredClients([]);\r\n//     }\r\n//   };\r\n\r\n//   const handleClientSelect = (client) => {\r\n//     setClName(client.nom);\r\n//     setClientCode(client.id);\r\n//     setFilteredClients([]);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"container mt-4\">\r\n//       <form onSubmit={handleSubmit} className=\"form-container\">\r\n//         <div className=\"form-group\">\r\n//           <label>Nom du client:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control\"\r\n//             value={clName}\r\n//             onChange={handleClientChange}\r\n//             required\r\n//           />\r\n//           {filteredClients.length > 0 && (\r\n//             <div className=\"autocomplete-dropdown\">\r\n//               {filteredClients.map(client => (\r\n//                 <div\r\n//                   key={client.id}\r\n//                   onClick={() => handleClientSelect(client)}\r\n//                   className=\"autocomplete-item\"\r\n//                 >\r\n//                   {client.nom}\r\n//                 </div>\r\n//               ))}\r\n//             </div>\r\n//           )}\r\n//         </div>\r\n//         <div className=\"form-group\">\r\n//           <label>Client Code:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control\"\r\n//             value={client_id}\r\n//             onChange={(e) => setClientCode(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-group\">\r\n//           <label>Date:</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             className=\"form-control\"\r\n//             value={date}\r\n//             onChange={(e) => setDate(e.target.value)}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         <div className=\"form-group\">\r\n//           <label>DT:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             className=\"form-control\"\r\n//             value={DT}\r\n//             onChange={handleDTChange}\r\n//             required\r\n//           />\r\n//         </div>\r\n//         {inputs.map((input, index) => (\r\n//           <div key={index} className=\"form-group\">\r\n//             <label>Référence de l'article:</label>\r\n//             <select\r\n//               className=\"form-control\"\r\n//               value={input.refAr}\r\n//               onChange={(event) => handleReferenceChange(event, index)}\r\n//               required\r\n//             >\r\n//               <option value=\"\">Choisir une référence</option>\r\n//               {references.map(reference => (\r\n//                 <option key={reference} value={reference}>\r\n//                   {reference}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n//             <label>Quantité:</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               className=\"form-control\"\r\n//               value={input.quantité}\r\n//               onChange={(event) => handleQuantityChange(event, index)}\r\n//               required\r\n//             />\r\n//             <label>Prix:</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               className=\"form-control\"\r\n//               value={input.price}\r\n//               readOnly\r\n//             />\r\n//             <label>Remise (%):</label>\r\n//             <input\r\n//               type=\"number\"\r\n//               className=\"form-control\"\r\n//               value={input.remise}\r\n//               ref={remiseInputRef}\r\n//               onChange={(event) => handleRemiseChange(event, index)}\r\n//             />\r\n//           </div>\r\n//         ))}\r\n//         <button type=\"button\" className=\"btn btn-secondary\" onClick={addInput}>\r\n//           Ajouter un article\r\n//         </button>\r\n//         <button type=\"submit\" className=\"btn btn-primary\">\r\n//           Enregistrer\r\n//         </button>\r\n//         <div className=\"mt-3\">\r\n//           <h5>Prix Total: {calculateTotalPrice()} DT</h5>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default CreateFactureAchat;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}