{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import axios from 'axios';\n// import Modal from 'react-modal';\n\n// Modal.setAppElement('#root');\n\n// function CreateFactureVente({ onAddFVente, selectedFacture }) {\n//     const [client, setClient] = useState('');\n//     const [date, setDate] = useState('');\n//     const [DT, setDT] = useState('1.000');\n//     const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//     const [references, setReferences] = useState([]);\n//     const [modalIsOpen, setModalIsOpen] = useState(false);\n\n//     const remiseInputRef = useRef(null);\n\n//     useEffect(() => {\n//         axios.get('http://localhost:7777/article')\n//             .then(res => {\n//                 setReferences(res.data.map(article => article.ref));\n//             })\n//             .catch(err => console.log('Error fetching articles:', err));\n//     }, []);\n\n//     useEffect(() => {\n//         if (selectedFacture) {\n//             setClient(selectedFacture.client || '');\n//             setDate(selectedFacture.date || '');\n//             setDT(selectedFacture.DT || '1.000');\n//             setInputs(selectedFacture.inputs || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//             setModalIsOpen(true); // Open the modal when a facture is selected\n//         }\n//     }, [selectedFacture]);\n\n//     const fetchPriceByReference = (reference, index) => {\n//         axios.get(`http://localhost:7777/factureVente/${reference}`)\n//             .then(res => {\n//                 const price = res.data.price;\n//                 const newInputs = [...inputs];\n//                 newInputs[index].price = price;\n//                 setInputs(newInputs);\n//             })\n//             .catch(err => console.log('Error fetching price:', err));\n//     };\n\n//     const handleReferenceChange = (event, index) => {\n//         const { value } = event.target;\n//         const newInputs = [...inputs];\n//         newInputs[index].refAr = value;\n//         setInputs(newInputs);\n//         fetchPriceByReference(value, index);\n//     };\n\n//     const handleRemiseChange = (event, index) => {\n//         const { value } = event.target;\n//         const newInputs = [...inputs];\n//         newInputs[index].remise = value;\n//         setInputs(newInputs);\n//     };\n\n//     const handleQuantityChange = (event, index) => {\n//         const { value } = event.target;\n//         const newInputs = [...inputs];\n//         newInputs[index].quantité = value;\n\n//         axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)\n//             .then(res => {\n//                 const availableQuantity = res.data.quantity;\n//                 const remainingQuantity = availableQuantity - parseInt(value);\n\n//                 if (remainingQuantity < 0) {\n//                     alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);\n//                     newInputs[index].quantité = availableQuantity;\n//                 }\n\n//                 const remisePrice = newInputs[index].price * (1 - (newInputs[index].remise / 100));\n//                 newInputs[index].price = parseFloat(remisePrice.toFixed(2));\n//                 setInputs(newInputs);\n//             })\n//             .catch(err => console.error('Error fetching quantity:', err));\n\n//         // Recalculate total\n//         const newTotal = newInputs.reduce((acc, curr) => acc + (curr.price * curr.quantité), 0) + parseFloat(DT); // Add DT to the total\n//         console.log(\"New Total:\", newTotal);\n//     };\n\n//     const handleAddInput = () => {\n//         // Check if any previous input fields are empty\n//         const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');\n\n//         // If any previous input field is empty, display an alert\n//         if (isEmpty) {\n//             alert(\"Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.\");\n//             return;\n//         }\n\n//         // If all previous input fields are filled, add a new input line\n//         setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);\n//     };\n\n//     const calculateTotal = () => {\n//         if (!inputs) return 0; // Check if inputs array is defined\n//         const total = inputs.reduce((acc, curr) => acc + ((curr.price * curr.quantité) / 100) * (100 - curr.remise), 0) + parseFloat(DT); // Add DT to the total\n//         return total.toFixed(3); // Round to three decimal places\n//     };\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n\n//         // Filter out empty inputs before checking for invalid references\n//         const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\n//         const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\n\n//         if (invalidReference) {\n//             alert(\"Sélectionner une référence valide\");\n//             return;\n//         }\n\n//         const refArArray = [];\n//         const quantiteArray = [];\n//         const remiseArray = [];\n//         nonEmptyInputs.forEach(input => {\n//             refArArray.push(input.refAr);\n//             quantiteArray.push(input.quantité);\n//             remiseArray.push(input.remise);\n//         });\n\n//         const totalPrice = calculateTotal();\n//         axios.post('http://localhost:7777/factureVente/createFac/', {\n//             client,\n//             date,\n//             DT,\n//             refAr: refArArray,\n//             quantité: quantiteArray,\n//             remise: remiseArray,\n//             totalPrice\n//         })\n//             .then(res => {\n//                 console.log(res);\n//                 window.location.reload();\n//             })\n//             .catch(err => console.log('Error creating facture:', err))\n//     };\n\n//     const handleKeyPress = (event) => {\n//         if (event.key === 'Enter') {\n//             handleAddInput();\n//         }\n//     };\n\n//     return (\n//         <div style={{ margin: '20px', justifyContent: 'center' }}>\n//             <div style={{ display: 'flex', flex: '1' }}>\n//                 <div>\n//                     <div style={{ marginBottom: '20px' }}>\n//                         <label style={{ width: '120px' }} htmlFor=\"client\">Nom du client</label>\n//                         <input\n//                             style={{ width: '200px' }}\n//                             type=\"text\"\n//                             id=\"client\"\n//                             value={client}\n//                             onChange={(e) => setClient(e.target.value)}\n//                         />\n//                     </div>\n//                     <div style={{ marginBottom: '20px' }}>\n//                         <label style={{ width: '120px' }} htmlFor=\"date\">Date</label>\n//                         <input\n//                             style={{ width: '200px' }}\n//                             type=\"date\"\n//                             id=\"date\"\n//                             value={date}\n//                             onChange={(e) => setDate(e.target.value)}\n//                         />\n//                     </div>\n//                     <div style={{ marginBottom: '20px' }}>\n//                         <label style={{ width: '120px' }} htmlFor=\"DT\">Droit de timbre</label>\n//                         <input\n//                             style={{ width: '200px' }}\n//                             type=\"text\"\n//                             id=\"code\"\n//                             value={DT}\n//                             onChange={(e) => setDT(e.target.value)}\n//                             onBlur={handleQuantityChange} // Add onBlur event to trigger recalculation when \"Droit de timbre\" value changes\n//                         />\n//                     </div>\n//                 </div>\n//                 <div>\n//                     <div>\n//                         {inputs.map((input, index) => (\n//                             <div key={index} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\n//                                     <label>Référence d'article</label>\n//                                     <input\n//                                         list=\"references\"\n//                                         style={{ width: '100%' }}\n//                                         value={input.refAr}\n//                                         onChange={(e) => handleReferenceChange(e, index)}\n//                                     />\n//                                     <datalist id=\"references\">\n//                                         {references.map((reference, idx) => (\n//                                             <option key={idx} value={reference} />\n//                                         ))}\n//                                     </datalist>\n//                                 </div>\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\n//                                     <label>Prix vente TTC</label>\n//                                     <input\n//                                         type=\"number\"\n//                                         style={{ width: '100%' }}\n//                                         value={input.price}\n//                                         readOnly\n//                                     />\n//                                 </div>\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\n//                                     <label>Quantité</label>\n//                                     <input\n//                                         type=\"number\"\n//                                         style={{ width: '100%' }}\n//                                         value={input.quantité}\n//                                         onChange={(e) => handleQuantityChange(e, index)}\n//                                     />\n//                                 </div>\n//                                 <div style={{ display: 'flex', alignItems: 'center' }}>\n//                                     <div style={{ flex: '1' }}>\n//                                         <label>Remise</label>\n//                                         <input\n//                                             type=\"number\"\n//                                             style={{ width: '100%' }}\n//                                             value={input.remise}\n//                                             onChange={(e) => handleRemiseChange(e, index)}\n//                                             onKeyDown={handleKeyPress} // Call handleKeyPress on key press\n//                                             ref={remiseInputRef} // Set the ref for Remise input field\n//                                         />\n//                                     </div>\n//                                     <div style={{ marginLeft: '10px' }}>\n//                                         <button type=\"button\" onClick={handleAddInput}>+</button>\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                         ))}\n//                     </div>\n//                 </div>\n//                 <div>\n//                     <div>\n//                         <div style={{ display: \"inline-block\", marginBottom: '20px', textAlign: 'center' }}>\n//                             <button\n//                                 style={{ width: '200px', marginBottom: '10px' }}\n//                                 type=\"button\"\n//                                 onClick={handleAddInput}\n//                             >\n//                                 Ajouter\n//                             </button>\n//                             <button\n//                                 style={{ width: '200px', marginBottom: '10px' }}\n//                                 type=\"submit\"\n//                                 onClick={handleSubmit}\n//                             >\n//                                 Enregistrer\n//                             </button>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//             <div style={{ marginBottom: '20px' }}>\n//                 <label>Total</label>\n//                 <input\n//                     type=\"text\" \n//                     style={{ width: '100%' }}\n//                     value={calculateTotal()}\n//                     readOnly\n//                 />\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default CreateFactureVente;\n// import React, { useState, useEffect, useRef } from 'react';\n// import axios from 'axios';\n// import Modal from 'react-modal';\n\n// Modal.setAppElement('#root');\n\n// function CreateFactureVente({ onAddFVente, selectedFacture }) {\n//     const [client, setClient] = useState('');\n//     const [date, setDate] = useState('');\n//     const [DT, setDT] = useState('1.000');\n//     const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//     const [references, setReferences] = useState([]);\n//     const [clients, setClients] = useState([]);\n//     const [filteredClients, setFilteredClients] = useState([]);\n//     const [modalIsOpen, setModalIsOpen] = useState(false);\n\n//     const remiseInputRef = useRef(null); // Ref for the Remise input field\n\n//     useEffect(() => {\n//         axios.get('http://localhost:7777/article')\n//             .then(res => {\n//                 setReferences(res.data.map(article => article.ref));\n//             })\n//             .catch(err => console.log('Error fetching articles:', err));\n//     }, []);\n\n//     useEffect(() => {\n//         if (selectedFacture) {\n//             setClient(selectedFacture.client || '');\n//             setDate(selectedFacture.date || '');\n//             setDT(selectedFacture.DT || '1.000');\n//             setInputs(selectedFacture.inputs || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//             setModalIsOpen(true);\n//         }\n//     }, [selectedFacture]);\n\n//     const fetchPriceByReference = (reference, index) => {\n//         axios.get(`http://localhost:7777/factureVente/${reference}`)\n//             .then(res => {\n//                 const price = res.data.price;\n//                 const newInputs = [...inputs];\n//                 newInputs[index].price = price;\n//                 setInputs(newInputs);\n//             })\n//             .catch(err => console.log('Error fetching price:', err));\n//     };\n\n//     const handleReferenceChange = (event, index) => {\n//         const { value } = event.target;\n//         const newInputs = [...inputs];\n//         newInputs[index].refAr = value;\n//         setInputs(newInputs);\n//         fetchPriceByReference(value, index);\n//     };\n\n//     const handleRemiseChange = (event, index) => {\n//         const { value } = event.target;\n//         const newInputs = [...inputs];\n//         newInputs[index].remise = value;\n//         setInputs(newInputs);\n//     };\n\n//     const handleQuantityChange = (event, index) => {\n//         const { value } = event.target;\n//         const newInputs = [...inputs];\n//         newInputs[index].quantité = value;\n\n//         axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)\n//             .then(res => {\n//                 const availableQuantity = res.data.quantity;\n//                 const remainingQuantity = availableQuantity - parseInt(value);\n\n//                 if (remainingQuantity < 0) {\n//                     alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);\n//                     newInputs[index].quantité = availableQuantity;\n//                 }\n\n//                 const remisePrice = newInputs[index].price * (1 - (newInputs[index].remise / 100));\n//                 newInputs[index].price = parseFloat(remisePrice.toFixed(2));\n//                 setInputs(newInputs);\n//             })\n//             .catch(err => console.error('Error fetching quantity:', err));\n\n//         const newTotal = newInputs.reduce((acc, curr) => acc + (curr.price * curr.quantité), 0) + parseFloat(DT);\n//         console.log(\"New Total:\", newTotal);\n//     };\n\n//     const handleAddInput = () => {\n//         const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');\n//         if (isEmpty) {\n//             alert(\"Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.\");\n//             return;\n//         }\n//         setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);\n//     };\n\n//     const calculateTotal = () => {\n//         if (!inputs) return 0; \n//         const total = inputs.reduce((acc, curr) => acc + ((curr.price * curr.quantité) / 100) * (100 - curr.remise), 0) + parseFloat(DT); // Add DT to the total\n//         return total.toFixed(3); // Round to three decimal places\n//     };\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n\n//         // Filter out empty inputs before checking for invalid references\n//         const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\n//         const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\n\n//         if (invalidReference) {\n//             alert(\"Sélectionner une référence valide\");\n//             return;\n//         }\n\n//         const refArArray = [];\n//         const quantiteArray = [];\n//         const remiseArray = [];\n//         nonEmptyInputs.forEach(input => {\n//             refArArray.push(input.refAr);\n//             quantiteArray.push(input.quantité);\n//             remiseArray.push(input.remise);\n//         });\n\n//         const totalPrice = calculateTotal();\n//         axios.post('http://localhost:7777/factureVente/createFac/', {\n//             client,\n//             date,\n//             DT,\n//             refAr: refArArray,\n//             quantité: quantiteArray,\n//             remise: remiseArray,\n//             totalPrice\n//         })\n//             .then(res => {\n//                 console.log(res);\n//                 window.location.reload();\n//             })\n//             .catch(err => console.log('Error creating facture:', err))\n//     };\n\n//     const handleKeyPress = (event) => {\n//         if (event.key === 'Enter') {\n//             handleAddInput();\n//         }\n//     };\n\n//     const handleClientChange = (e) => {\n//         const { value } = e.target;\n//         setClient(value);\n//         // Filter clients based on user input\n//         setFilteredClients(clients.filter(client => client.clName.toLowerCase().includes(value.toLowerCase())));\n//     };\n\n//     const handleClientSelect = (name) => {\n//         setClient(name);\n//         setFilteredClients([]);\n//     };\n\n//     return (\n//         <div style={{ margin: '20px', justifyContent: 'center' }}>\n//             <div style={{ display: 'flex', flex: '1' }}>\n//                 <div>\n//                 <div style={{ marginBottom: '20px' }}>\n//                         <label style={{ width: '120px' }} htmlFor=\"code-client\">Code client:</label>\n//                         <input\n//                             style={{ width: '200px' }}\n//                             type=\"text\"\n//                             id=\"code-client\"\n//                             name=\"code-client\"  \n//                         />\n//                     </div>\n//                     <div style={{ marginBottom: '20px' }}>\n//                         <label style={{ width: '120px' }} htmlFor=\"client\">Nom du client</label>\n//                         <input\n//                             style={{ width: '200px' }}\n//                             type=\"text\"\n//                             id=\"client\"\n//                             value={client}\n//                             onChange={handleClientChange}\n//                         />\n//                         {filteredClients.length > 0 && (\n//                             <ul style={{ listStyleType: 'none', padding: 0, margin: 0, position: 'absolute', zIndex: 1, backgroundColor: 'white', border: '1px solid #ccc', width: '200px' }}>\n//                                 {filteredClients.map((client, index) => (\n//                                     <li key={index} style={{ padding: '5px', cursor: 'pointer' }} onClick={() => handleClientSelect(client.clName)}>\n//                                         {client.clName}\n//                                     </li>\n//                                 ))}\n//                             </ul>\n//                         )}\n\n//                     </div>\n//                     <div style={{ marginBottom: '20px' }}>\n//                         <label style={{ width: '120px' }} htmlFor=\"date\">Date</label>\n//                         <input\n//                             style={{ width: '200px' }}\n//                             type=\"date\"\n//                             id=\"date\"\n//                             value={date}\n//                             onChange={(e) => setDate(e.target.value)}\n//                         />\n//                     </div>\n//                     <div style={{ marginBottom: '20px' }}>\n//                         <label style={{ width: '120px' }} htmlFor=\"DT\">Droit de timbre</label>\n//                         <input\n//                             style={{ width: '200px' }}\n//                             type=\"text\"\n//                             id=\"code\"\n//                             value={DT}\n//                             onChange={(e) => setDT(e.target.value)}\n//                             onBlur={handleQuantityChange} // Add onBlur event to trigger recalculation when \"Droit de timbre\" value changes\n//                         />\n//                     </div>\n//                 </div>\n//                 <div>\n//                     <div>\n//                         {inputs.map((input, index) => (\n//                             <div key={index} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\n//                                     <label>Référence d'article</label>\n//                                     <input\n//                                         list=\"references\"\n//                                         style={{ width: '100%' }}\n//                                         value={input.refAr}\n//                                         onChange={(e) => handleReferenceChange(e, index)}\n//                                     />\n//                                     <datalist id=\"references\">\n//                                         {references.map((reference, idx) => (\n//                                             <option key={idx} value={reference} />\n//                                         ))}\n//                                     </datalist>\n//                                 </div>\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\n//                                     <label>Prix vente TTC</label>\n//                                     <input\n//                                         type=\"number\"\n//                                         style={{ width: '100%' }}\n//                                         value={input.price}\n//                                         readOnly\n//                                     />\n//                                 </div>\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\n//                                     <label>Quantité</label>\n//                                     <input\n//                                         type=\"number\"\n//                                         style={{ width: '100%' }}\n//                                         value={input.quantité}\n//                                         onChange={(e) => handleQuantityChange(e, index)}\n//                                     />\n//                                 </div>\n//                                 <div style={{ display: 'flex', alignItems: 'center' }}>\n//                                     <div style={{ flex: '1' }}>\n//                                         <label>Remise</label>\n//                                         <input\n//                                             type=\"number\"\n//                                             style={{ width: '100%' }}\n//                                             value={input.remise}\n//                                             onChange={(e) => handleRemiseChange(e, index)}\n//                                             onKeyDown={handleKeyPress} // Call handleKeyPress on key press\n//                                             ref={remiseInputRef} // Set the ref for Remise input field\n//                                         />\n//                                     </div>\n//                                     <div style={{ marginLeft: '10px' }}>\n//                                         <button type=\"button\" onClick={handleAddInput}>+</button>\n//                                     </div>\n//                                 </div>\n//                             </div>\n//                         ))}\n//                     </div>\n//                 </div>\n//                 <div>\n//                     <div>\n//                         <div style={{ display: \"inline-block\", marginBottom: '20px', textAlign: 'center' }}>\n//                             <button\n//                                 style={{ width: '200px', marginBottom: '10px' }}\n//                                 type=\"button\"\n//                                 onClick={handleAddInput}\n//                             >\n//                                 Ajouter\n//                             </button>\n//                             <button\n//                                 style={{ width: '200px', marginBottom: '10px' }}\n//                                 type=\"submit\"\n//                                 onClick={handleSubmit}\n//                             >\n//                                 Enregistrer\n//                             </button>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//             <div style={{ marginBottom: '20px' }}>\n//                 <label>Total</label>\n//                 <input\n//                     type=\"text\" \n//                     style={{ width: '100%' }}\n//                     value={calculateTotal()}\n//                     readOnly\n//                 />\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default CreateFactureVente;","map":{"version":3,"names":[],"sources":["C:/Users/Dell/OneDrive/Bureau/quincaillerie/frontend/src/CreateFactureVente.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import axios from 'axios';\r\n// import Modal from 'react-modal';\r\n\r\n// Modal.setAppElement('#root');\r\n\r\n// function CreateFactureVente({ onAddFVente, selectedFacture }) {\r\n//     const [client, setClient] = useState('');\r\n//     const [date, setDate] = useState('');\r\n//     const [DT, setDT] = useState('1.000');\r\n//     const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//     const [references, setReferences] = useState([]);\r\n//     const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n//     const remiseInputRef = useRef(null);\r\n\r\n//     useEffect(() => {\r\n//         axios.get('http://localhost:7777/article')\r\n//             .then(res => {\r\n//                 setReferences(res.data.map(article => article.ref));\r\n//             })\r\n//             .catch(err => console.log('Error fetching articles:', err));\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         if (selectedFacture) {\r\n//             setClient(selectedFacture.client || '');\r\n//             setDate(selectedFacture.date || '');\r\n//             setDT(selectedFacture.DT || '1.000');\r\n//             setInputs(selectedFacture.inputs || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//             setModalIsOpen(true); // Open the modal when a facture is selected\r\n//         }\r\n//     }, [selectedFacture]);\r\n\r\n//     const fetchPriceByReference = (reference, index) => {\r\n//         axios.get(`http://localhost:7777/factureVente/${reference}`)\r\n//             .then(res => {\r\n//                 const price = res.data.price;\r\n//                 const newInputs = [...inputs];\r\n//                 newInputs[index].price = price;\r\n//                 setInputs(newInputs);\r\n//             })\r\n//             .catch(err => console.log('Error fetching price:', err));\r\n//     };\r\n\r\n//     const handleReferenceChange = (event, index) => {\r\n//         const { value } = event.target;\r\n//         const newInputs = [...inputs];\r\n//         newInputs[index].refAr = value;\r\n//         setInputs(newInputs);\r\n//         fetchPriceByReference(value, index);\r\n//     };\r\n\r\n//     const handleRemiseChange = (event, index) => {\r\n//         const { value } = event.target;\r\n//         const newInputs = [...inputs];\r\n//         newInputs[index].remise = value;\r\n//         setInputs(newInputs);\r\n//     };\r\n\r\n//     const handleQuantityChange = (event, index) => {\r\n//         const { value } = event.target;\r\n//         const newInputs = [...inputs];\r\n//         newInputs[index].quantité = value;\r\n\r\n//         axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)\r\n//             .then(res => {\r\n//                 const availableQuantity = res.data.quantity;\r\n//                 const remainingQuantity = availableQuantity - parseInt(value);\r\n\r\n//                 if (remainingQuantity < 0) {\r\n//                     alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);\r\n//                     newInputs[index].quantité = availableQuantity;\r\n//                 }\r\n\r\n//                 const remisePrice = newInputs[index].price * (1 - (newInputs[index].remise / 100));\r\n//                 newInputs[index].price = parseFloat(remisePrice.toFixed(2));\r\n//                 setInputs(newInputs);\r\n//             })\r\n//             .catch(err => console.error('Error fetching quantity:', err));\r\n\r\n//         // Recalculate total\r\n//         const newTotal = newInputs.reduce((acc, curr) => acc + (curr.price * curr.quantité), 0) + parseFloat(DT); // Add DT to the total\r\n//         console.log(\"New Total:\", newTotal);\r\n//     };\r\n\r\n//     const handleAddInput = () => {\r\n//         // Check if any previous input fields are empty\r\n//         const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');\r\n\r\n//         // If any previous input field is empty, display an alert\r\n//         if (isEmpty) {\r\n//             alert(\"Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.\");\r\n//             return;\r\n//         }\r\n\r\n//         // If all previous input fields are filled, add a new input line\r\n//         setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);\r\n//     };\r\n\r\n//     const calculateTotal = () => {\r\n//         if (!inputs) return 0; // Check if inputs array is defined\r\n//         const total = inputs.reduce((acc, curr) => acc + ((curr.price * curr.quantité) / 100) * (100 - curr.remise), 0) + parseFloat(DT); // Add DT to the total\r\n//         return total.toFixed(3); // Round to three decimal places\r\n//     };\r\n\r\n//     const handleSubmit = (event) => {\r\n//         event.preventDefault();\r\n\r\n//         // Filter out empty inputs before checking for invalid references\r\n//         const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\r\n//         const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\r\n\r\n//         if (invalidReference) {\r\n//             alert(\"Sélectionner une référence valide\");\r\n//             return;\r\n//         }\r\n\r\n//         const refArArray = [];\r\n//         const quantiteArray = [];\r\n//         const remiseArray = [];\r\n//         nonEmptyInputs.forEach(input => {\r\n//             refArArray.push(input.refAr);\r\n//             quantiteArray.push(input.quantité);\r\n//             remiseArray.push(input.remise);\r\n//         });\r\n\r\n//         const totalPrice = calculateTotal();\r\n//         axios.post('http://localhost:7777/factureVente/createFac/', {\r\n//             client,\r\n//             date,\r\n//             DT,\r\n//             refAr: refArArray,\r\n//             quantité: quantiteArray,\r\n//             remise: remiseArray,\r\n//             totalPrice\r\n//         })\r\n//             .then(res => {\r\n//                 console.log(res);\r\n//                 window.location.reload();\r\n//             })\r\n//             .catch(err => console.log('Error creating facture:', err))\r\n//     };\r\n\r\n//     const handleKeyPress = (event) => {\r\n//         if (event.key === 'Enter') {\r\n//             handleAddInput();\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div style={{ margin: '20px', justifyContent: 'center' }}>\r\n//             <div style={{ display: 'flex', flex: '1' }}>\r\n//                 <div>\r\n//                     <div style={{ marginBottom: '20px' }}>\r\n//                         <label style={{ width: '120px' }} htmlFor=\"client\">Nom du client</label>\r\n//                         <input\r\n//                             style={{ width: '200px' }}\r\n//                             type=\"text\"\r\n//                             id=\"client\"\r\n//                             value={client}\r\n//                             onChange={(e) => setClient(e.target.value)}\r\n//                         />\r\n//                     </div>\r\n//                     <div style={{ marginBottom: '20px' }}>\r\n//                         <label style={{ width: '120px' }} htmlFor=\"date\">Date</label>\r\n//                         <input\r\n//                             style={{ width: '200px' }}\r\n//                             type=\"date\"\r\n//                             id=\"date\"\r\n//                             value={date}\r\n//                             onChange={(e) => setDate(e.target.value)}\r\n//                         />\r\n//                     </div>\r\n//                     <div style={{ marginBottom: '20px' }}>\r\n//                         <label style={{ width: '120px' }} htmlFor=\"DT\">Droit de timbre</label>\r\n//                         <input\r\n//                             style={{ width: '200px' }}\r\n//                             type=\"text\"\r\n//                             id=\"code\"\r\n//                             value={DT}\r\n//                             onChange={(e) => setDT(e.target.value)}\r\n//                             onBlur={handleQuantityChange} // Add onBlur event to trigger recalculation when \"Droit de timbre\" value changes\r\n//                         />\r\n//                     </div>\r\n//                 </div>\r\n//                 <div>\r\n//                     <div>\r\n//                         {inputs.map((input, index) => (\r\n//                             <div key={index} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\r\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\r\n//                                     <label>Référence d'article</label>\r\n//                                     <input\r\n//                                         list=\"references\"\r\n//                                         style={{ width: '100%' }}\r\n//                                         value={input.refAr}\r\n//                                         onChange={(e) => handleReferenceChange(e, index)}\r\n//                                     />\r\n//                                     <datalist id=\"references\">\r\n//                                         {references.map((reference, idx) => (\r\n//                                             <option key={idx} value={reference} />\r\n//                                         ))}\r\n//                                     </datalist>\r\n//                                 </div>\r\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\r\n//                                     <label>Prix vente TTC</label>\r\n//                                     <input\r\n//                                         type=\"number\"\r\n//                                         style={{ width: '100%' }}\r\n//                                         value={input.price}\r\n//                                         readOnly\r\n//                                     />\r\n//                                 </div>\r\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\r\n//                                     <label>Quantité</label>\r\n//                                     <input\r\n//                                         type=\"number\"\r\n//                                         style={{ width: '100%' }}\r\n//                                         value={input.quantité}\r\n//                                         onChange={(e) => handleQuantityChange(e, index)}\r\n//                                     />\r\n//                                 </div>\r\n//                                 <div style={{ display: 'flex', alignItems: 'center' }}>\r\n//                                     <div style={{ flex: '1' }}>\r\n//                                         <label>Remise</label>\r\n//                                         <input\r\n//                                             type=\"number\"\r\n//                                             style={{ width: '100%' }}\r\n//                                             value={input.remise}\r\n//                                             onChange={(e) => handleRemiseChange(e, index)}\r\n//                                             onKeyDown={handleKeyPress} // Call handleKeyPress on key press\r\n//                                             ref={remiseInputRef} // Set the ref for Remise input field\r\n//                                         />\r\n//                                     </div>\r\n//                                     <div style={{ marginLeft: '10px' }}>\r\n//                                         <button type=\"button\" onClick={handleAddInput}>+</button>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             </div>\r\n//                         ))}\r\n//                     </div>\r\n//                 </div>\r\n//                 <div>\r\n//                     <div>\r\n//                         <div style={{ display: \"inline-block\", marginBottom: '20px', textAlign: 'center' }}>\r\n//                             <button\r\n//                                 style={{ width: '200px', marginBottom: '10px' }}\r\n//                                 type=\"button\"\r\n//                                 onClick={handleAddInput}\r\n//                             >\r\n//                                 Ajouter\r\n//                             </button>\r\n//                             <button\r\n//                                 style={{ width: '200px', marginBottom: '10px' }}\r\n//                                 type=\"submit\"\r\n//                                 onClick={handleSubmit}\r\n//                             >\r\n//                                 Enregistrer\r\n//                             </button>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//             <div style={{ marginBottom: '20px' }}>\r\n//                 <label>Total</label>\r\n//                 <input\r\n//                     type=\"text\" \r\n//                     style={{ width: '100%' }}\r\n//                     value={calculateTotal()}\r\n//                     readOnly\r\n//                 />\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default CreateFactureVente;\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import axios from 'axios';\r\n// import Modal from 'react-modal';\r\n\r\n// Modal.setAppElement('#root');\r\n\r\n// function CreateFactureVente({ onAddFVente, selectedFacture }) {\r\n//     const [client, setClient] = useState('');\r\n//     const [date, setDate] = useState('');\r\n//     const [DT, setDT] = useState('1.000');\r\n//     const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//     const [references, setReferences] = useState([]);\r\n//     const [clients, setClients] = useState([]);\r\n//     const [filteredClients, setFilteredClients] = useState([]);\r\n//     const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n//     const remiseInputRef = useRef(null); // Ref for the Remise input field\r\n\r\n//     useEffect(() => {\r\n//         axios.get('http://localhost:7777/article')\r\n//             .then(res => {\r\n//                 setReferences(res.data.map(article => article.ref));\r\n//             })\r\n//             .catch(err => console.log('Error fetching articles:', err));\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         if (selectedFacture) {\r\n//             setClient(selectedFacture.client || '');\r\n//             setDate(selectedFacture.date || '');\r\n//             setDT(selectedFacture.DT || '1.000');\r\n//             setInputs(selectedFacture.inputs || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//             setModalIsOpen(true);\r\n//         }\r\n//     }, [selectedFacture]);\r\n\r\n\r\n//     const fetchPriceByReference = (reference, index) => {\r\n//         axios.get(`http://localhost:7777/factureVente/${reference}`)\r\n//             .then(res => {\r\n//                 const price = res.data.price;\r\n//                 const newInputs = [...inputs];\r\n//                 newInputs[index].price = price;\r\n//                 setInputs(newInputs);\r\n//             })\r\n//             .catch(err => console.log('Error fetching price:', err));\r\n//     };\r\n\r\n//     const handleReferenceChange = (event, index) => {\r\n//         const { value } = event.target;\r\n//         const newInputs = [...inputs];\r\n//         newInputs[index].refAr = value;\r\n//         setInputs(newInputs);\r\n//         fetchPriceByReference(value, index);\r\n//     };\r\n\r\n//     const handleRemiseChange = (event, index) => {\r\n//         const { value } = event.target;\r\n//         const newInputs = [...inputs];\r\n//         newInputs[index].remise = value;\r\n//         setInputs(newInputs);\r\n//     };\r\n\r\n//     const handleQuantityChange = (event, index) => {\r\n//         const { value } = event.target;\r\n//         const newInputs = [...inputs];\r\n//         newInputs[index].quantité = value;\r\n\r\n//         axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)\r\n//             .then(res => {\r\n//                 const availableQuantity = res.data.quantity;\r\n//                 const remainingQuantity = availableQuantity - parseInt(value);\r\n\r\n//                 if (remainingQuantity < 0) {\r\n//                     alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);\r\n//                     newInputs[index].quantité = availableQuantity;\r\n//                 }\r\n\r\n//                 const remisePrice = newInputs[index].price * (1 - (newInputs[index].remise / 100));\r\n//                 newInputs[index].price = parseFloat(remisePrice.toFixed(2));\r\n//                 setInputs(newInputs);\r\n//             })\r\n//             .catch(err => console.error('Error fetching quantity:', err));\r\n\r\n//         const newTotal = newInputs.reduce((acc, curr) => acc + (curr.price * curr.quantité), 0) + parseFloat(DT);\r\n//         console.log(\"New Total:\", newTotal);\r\n//     };\r\n\r\n//     const handleAddInput = () => {\r\n//         const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');\r\n//         if (isEmpty) {\r\n//             alert(\"Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.\");\r\n//             return;\r\n//         }\r\n//         setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);\r\n//     };\r\n\r\n//     const calculateTotal = () => {\r\n//         if (!inputs) return 0; \r\n//         const total = inputs.reduce((acc, curr) => acc + ((curr.price * curr.quantité) / 100) * (100 - curr.remise), 0) + parseFloat(DT); // Add DT to the total\r\n//         return total.toFixed(3); // Round to three decimal places\r\n//     };\r\n\r\n//     const handleSubmit = (event) => {\r\n//         event.preventDefault();\r\n\r\n//         // Filter out empty inputs before checking for invalid references\r\n//         const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\r\n//         const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\r\n\r\n//         if (invalidReference) {\r\n//             alert(\"Sélectionner une référence valide\");\r\n//             return;\r\n//         }\r\n\r\n//         const refArArray = [];\r\n//         const quantiteArray = [];\r\n//         const remiseArray = [];\r\n//         nonEmptyInputs.forEach(input => {\r\n//             refArArray.push(input.refAr);\r\n//             quantiteArray.push(input.quantité);\r\n//             remiseArray.push(input.remise);\r\n//         });\r\n\r\n//         const totalPrice = calculateTotal();\r\n//         axios.post('http://localhost:7777/factureVente/createFac/', {\r\n//             client,\r\n//             date,\r\n//             DT,\r\n//             refAr: refArArray,\r\n//             quantité: quantiteArray,\r\n//             remise: remiseArray,\r\n//             totalPrice\r\n//         })\r\n//             .then(res => {\r\n//                 console.log(res);\r\n//                 window.location.reload();\r\n//             })\r\n//             .catch(err => console.log('Error creating facture:', err))\r\n//     };\r\n\r\n//     const handleKeyPress = (event) => {\r\n//         if (event.key === 'Enter') {\r\n//             handleAddInput();\r\n//         }\r\n//     };\r\n\r\n//     const handleClientChange = (e) => {\r\n//         const { value } = e.target;\r\n//         setClient(value);\r\n//         // Filter clients based on user input\r\n//         setFilteredClients(clients.filter(client => client.clName.toLowerCase().includes(value.toLowerCase())));\r\n//     };\r\n    \r\n//     const handleClientSelect = (name) => {\r\n//         setClient(name);\r\n//         setFilteredClients([]);\r\n//     };\r\n\r\n//     return (\r\n//         <div style={{ margin: '20px', justifyContent: 'center' }}>\r\n//             <div style={{ display: 'flex', flex: '1' }}>\r\n//                 <div>\r\n//                 <div style={{ marginBottom: '20px' }}>\r\n//                         <label style={{ width: '120px' }} htmlFor=\"code-client\">Code client:</label>\r\n//                         <input\r\n//                             style={{ width: '200px' }}\r\n//                             type=\"text\"\r\n//                             id=\"code-client\"\r\n//                             name=\"code-client\"  \r\n//                         />\r\n//                     </div>\r\n//                     <div style={{ marginBottom: '20px' }}>\r\n//                         <label style={{ width: '120px' }} htmlFor=\"client\">Nom du client</label>\r\n//                         <input\r\n//                             style={{ width: '200px' }}\r\n//                             type=\"text\"\r\n//                             id=\"client\"\r\n//                             value={client}\r\n//                             onChange={handleClientChange}\r\n//                         />\r\n//                         {filteredClients.length > 0 && (\r\n//                             <ul style={{ listStyleType: 'none', padding: 0, margin: 0, position: 'absolute', zIndex: 1, backgroundColor: 'white', border: '1px solid #ccc', width: '200px' }}>\r\n//                                 {filteredClients.map((client, index) => (\r\n//                                     <li key={index} style={{ padding: '5px', cursor: 'pointer' }} onClick={() => handleClientSelect(client.clName)}>\r\n//                                         {client.clName}\r\n//                                     </li>\r\n//                                 ))}\r\n//                             </ul>\r\n//                         )}\r\n\r\n//                     </div>\r\n//                     <div style={{ marginBottom: '20px' }}>\r\n//                         <label style={{ width: '120px' }} htmlFor=\"date\">Date</label>\r\n//                         <input\r\n//                             style={{ width: '200px' }}\r\n//                             type=\"date\"\r\n//                             id=\"date\"\r\n//                             value={date}\r\n//                             onChange={(e) => setDate(e.target.value)}\r\n//                         />\r\n//                     </div>\r\n//                     <div style={{ marginBottom: '20px' }}>\r\n//                         <label style={{ width: '120px' }} htmlFor=\"DT\">Droit de timbre</label>\r\n//                         <input\r\n//                             style={{ width: '200px' }}\r\n//                             type=\"text\"\r\n//                             id=\"code\"\r\n//                             value={DT}\r\n//                             onChange={(e) => setDT(e.target.value)}\r\n//                             onBlur={handleQuantityChange} // Add onBlur event to trigger recalculation when \"Droit de timbre\" value changes\r\n//                         />\r\n//                     </div>\r\n//                 </div>\r\n//                 <div>\r\n//                     <div>\r\n//                         {inputs.map((input, index) => (\r\n//                             <div key={index} style={{ display: 'flex', alignItems: 'center', marginBottom: '10px' }}>\r\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\r\n//                                     <label>Référence d'article</label>\r\n//                                     <input\r\n//                                         list=\"references\"\r\n//                                         style={{ width: '100%' }}\r\n//                                         value={input.refAr}\r\n//                                         onChange={(e) => handleReferenceChange(e, index)}\r\n//                                     />\r\n//                                     <datalist id=\"references\">\r\n//                                         {references.map((reference, idx) => (\r\n//                                             <option key={idx} value={reference} />\r\n//                                         ))}\r\n//                                     </datalist>\r\n//                                 </div>\r\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\r\n//                                     <label>Prix vente TTC</label>\r\n//                                     <input\r\n//                                         type=\"number\"\r\n//                                         style={{ width: '100%' }}\r\n//                                         value={input.price}\r\n//                                         readOnly\r\n//                                     />\r\n//                                 </div>\r\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\r\n//                                     <label>Quantité</label>\r\n//                                     <input\r\n//                                         type=\"number\"\r\n//                                         style={{ width: '100%' }}\r\n//                                         value={input.quantité}\r\n//                                         onChange={(e) => handleQuantityChange(e, index)}\r\n//                                     />\r\n//                                 </div>\r\n//                                 <div style={{ display: 'flex', alignItems: 'center' }}>\r\n//                                     <div style={{ flex: '1' }}>\r\n//                                         <label>Remise</label>\r\n//                                         <input\r\n//                                             type=\"number\"\r\n//                                             style={{ width: '100%' }}\r\n//                                             value={input.remise}\r\n//                                             onChange={(e) => handleRemiseChange(e, index)}\r\n//                                             onKeyDown={handleKeyPress} // Call handleKeyPress on key press\r\n//                                             ref={remiseInputRef} // Set the ref for Remise input field\r\n//                                         />\r\n//                                     </div>\r\n//                                     <div style={{ marginLeft: '10px' }}>\r\n//                                         <button type=\"button\" onClick={handleAddInput}>+</button>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             </div>\r\n//                         ))}\r\n//                     </div>\r\n//                 </div>\r\n//                 <div>\r\n//                     <div>\r\n//                         <div style={{ display: \"inline-block\", marginBottom: '20px', textAlign: 'center' }}>\r\n//                             <button\r\n//                                 style={{ width: '200px', marginBottom: '10px' }}\r\n//                                 type=\"button\"\r\n//                                 onClick={handleAddInput}\r\n//                             >\r\n//                                 Ajouter\r\n//                             </button>\r\n//                             <button\r\n//                                 style={{ width: '200px', marginBottom: '10px' }}\r\n//                                 type=\"submit\"\r\n//                                 onClick={handleSubmit}\r\n//                             >\r\n//                                 Enregistrer\r\n//                             </button>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//             <div style={{ marginBottom: '20px' }}>\r\n//                 <label>Total</label>\r\n//                 <input\r\n//                     type=\"text\" \r\n//                     style={{ width: '100%' }}\r\n//                     value={calculateTotal()}\r\n//                     readOnly\r\n//                 />\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default CreateFactureVente;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}