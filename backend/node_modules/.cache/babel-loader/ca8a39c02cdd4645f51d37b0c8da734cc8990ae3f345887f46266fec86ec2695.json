{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Bureau\\\\quincaillerie\\\\frontend\\\\src\\\\CreateFactureVente.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import Modal from 'react-modal';\n// import FactureVente from './FactureVente';\n\n// Modal.setAppElement('#root');\n\n// function CreateFactureVente({ onAddFVente, selectedFacture }) {\n//     const [client, setClient] = useState('');\n//     const [date, setDate] = useState('');\n//     const [DT, setDT] = useState('1.000');\n//     const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//     const [references, setReferences] = useState([]);\n//     const [telephone, setTelephone] = useState('');\n//     const [modalIsOpen, setModalIsOpen] = useState(false);\n\n//     const openModal = () => {\n//         setModalIsOpen(true);\n//     };\n\n//     const closeModal = () => {\n//         setModalIsOpen(false);\n//     };\n\n//     useEffect(() => {\n//         axios.get('http://localhost:7777/article')\n//             .then(res => {\n//                 setReferences(res.data.map(article => article.ref));\n//             })\n//             .catch(err => console.log('Error fetching articles:', err));\n//     }, []);\n\n//     useEffect(() => {\n//         if (selectedFacture) {\n//             setClient(selectedFacture.client || '');\n//             setDate(selectedFacture.date || '');\n//             setDT(selectedFacture.DT || '');\n//             setInputs(selectedFacture.inputs || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//             setTelephone(selectedFacture.telephone || '');\n//         }\n//     }, [selectedFacture]);\n\n//     const fetchPriceByReference = (reference, index) => {\n//         axios.get(`http://localhost:7777/factureVente/${reference}`) \n//             .then(res => {\n//                 const price = res.data.price;\n//                 const newInputs = [...inputs];\n//                 newInputs[index].price = price;\n//                 setInputs(newInputs);\n//             })\n//             .catch(err => console.log('Error fetching price:', err));\n//     };\n\n//     const handleReferenceChange = (event, index) => {\n//         const { value } = event.target;\n//         const newInputs = [...inputs];\n//         newInputs[index].refAr = value;\n//         setInputs(newInputs);\n//         fetchPriceByReference(value, index); \n//     };\n\n//     const handleRemiseChange = (event, index) => {\n//         const { value } = event.target;\n//         const newInputs = [...inputs];\n//         newInputs[index].remise = value;\n//         setInputs(newInputs);\n//     };\n\n//     const handleQuantityChange = (event, index) => {\n//         const { value } = event.target;\n//         const newInputs = [...inputs];\n//         newInputs[index].quantité = value;\n\n//         axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)\n//             .then(res => {\n//                 const availableQuantity = res.data.quantity;\n//                 const remainingQuantity = availableQuantity - parseInt(value);\n\n//                 if (remainingQuantity < 0) {\n//                     alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);\n//                     newInputs[index].quantité = availableQuantity;\n//                 }\n\n//                 const remisePrice = newInputs[index].price * (1 - (newInputs[index].remise / 100));\n//                 newInputs[index].price = parseFloat(remisePrice.toFixed(2));\n//                 setInputs(newInputs);\n//             })\n//             .catch(err => console.error('Error fetching quantity:', err));\n\n//         // Recalculate total\n//         const newTotal = newInputs.reduce((acc, curr) => acc + (curr.price * curr.quantité), 0);\n//         console.log(\"New Total:\", newTotal);\n//     };\n\n//     // const handleAddInput = () => {\n//     //     // Check if any previous input fields are empty\n//     //     const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');\n\n//     //     // If any previous input field is empty, display an alert\n//     //     if (isEmpty) {\n//     //         alert(\"Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.\");\n//     //         return;\n//     //     }\n\n//     //     // If all previous input fields are filled, add a new input line\n//     //     setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);\n//     // };\n//     const handleAddInput = () => {\n//         // Check if any previous input fields are empty\n//         const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');\n\n//         // If any previous input field is empty, display an alert\n//         if (isEmpty) {\n//             alert(\"Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.\");\n//             return;\n//         }\n\n//         // If all previous input fields are filled, add a new input line\n//         setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);\n//     };\n\n//     const calculateTotal = () => {\n//         if (!inputs) return 0; // Check if inputs array is defined\n//         return inputs.reduce((acc, curr) => acc + ((curr.price * curr.quantité) / 100) * (100 - curr.remise), 0);\n//     };\n\n//     const handleSubmit = (event) => {\n//         event.preventDefault();\n\n//         // Filter out empty inputs before checking for invalid references\n//         const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\n//         const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\n\n//         if (invalidReference) {\n//             alert(\"Sélectionner une référence valide\");\n//             return;\n//         }\n\n//         const refArArray = [];\n//         const quantiteArray = [];\n//         const remiseArray = [];\n//         nonEmptyInputs.forEach(input => {\n//             refArArray.push(input.refAr);\n//             quantiteArray.push(input.quantité);\n//             remiseArray.push(input.remise);\n//         });\n\n//         const totalPrice = calculateTotal();\n//         axios.post('http://localhost:7777/factureVente/createFac/', {\n//             client,\n//             date,\n//             DT,\n//             refAr: refArArray,\n//             quantité: quantiteArray,\n//             remise: remiseArray,\n//             totalPrice\n//         })\n//             .then(res => {\n//                 console.log(res);\n//                 window.location.reload();\n//             })\n//             .catch(err => console.log('Error creating facture:', err))\n//     };\n\n//     return (\n//         <div style={{ margin: '20px', justifyContent: 'center' }}>\n//             <div style={{ display: 'flex', flex: '1' }}>\n//                 <div>\n//                     <div style={{ marginBottom: '20px' }}>\n//                         <label style={{ width: '120px' }} htmlFor=\"client\">Nom du client</label>\n//                         <input\n//                             style={{ width: '200px' }}\n//                             type=\"text\"\n//                             id=\"client\"\n//                             value={client}\n//                             onChange={(e) => setClient(e.target.value)}\n//                         />\n//                     </div>\n//                     <div style={{ marginBottom: '20px' }}>\n//                         <label style={{ width: '120px' }} htmlFor=\"date\">Date</label>\n//                         <input\n//                             style={{ width: '200px' }}\n//                             type=\"date\"\n//                             id=\"date\"\n//                             value={date}\n//                             onChange={(e) => setDate(e.target.value)}\n//                         />\n//                     </div>\n//                     <div style={{ marginBottom: '20px' }}>\n//                         <label style={{ width: '120px' }} htmlFor=\"DT\">Droit de timbre</label>\n//                         <input\n//                             style={{ width: '200px' }}\n//                             type=\"text\"\n//                             id=\"code\"\n//                             value={DT}\n//                             onChange={(e) => setDT(e.target.value)}\n//                         />\n//                     </div>\n//                     <div style={{ marginBottom: '20px' }}>\n//                         <label style={{ width: '120px' }} htmlFor=\"telephone\">Téléphone</label>\n//                         <input\n//                             style={{ width: '200px' }}\n//                             type=\"text\"\n//                             id=\"telephone\"\n//                             value={telephone}\n//                             onChange={(e) => setTelephone(e.target.value)}\n//                         />\n//                     </div>\n//                 </div>\n//                 <div>\n//                     <div>\n//                         {inputs.map((input, index) => (\n//                             <div key={index} style={{ display: 'flex', marginBottom: '10px' }}>\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\n//                                     <label>Référence d'article</label>\n//                                     <input\n//                                         list=\"references\"\n//                                         style={{ width: '100%' }}\n//                                         value={input.refAr}\n//                                         onChange={(e) => handleReferenceChange(e, index)}\n//                                     />\n//                                     <datalist id=\"references\">\n//                                         {references.map((reference, idx) => (\n//                                             <option key={idx} value={reference} />\n//                                         ))}\n//                                     </datalist>\n//                                 </div>\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\n//                                     <label>Prix vente TTC</label>\n//                                     <input\n//                                         type=\"number\"\n//                                         style={{ width: '100%' }}\n//                                         value={input.price}\n//                                         readOnly\n//                                     />\n//                                 </div>\n//                                 <div style={{ flex: '1', marginRight:'10px' }}>\n//                                     <label>Quantité</label>\n//                                     <input\n//                                         type=\"number\"\n//                                         style={{ width: '100%' }}\n//                                         value={input.quantité}\n//                                         onChange={(e) =>handleQuantityChange(e, index)}\n//                                     />\n//                                 </div>\n//                                 <div style={{ flex: '1' }}>\n//                                     <label>Remise</label>\n//                                     <input\n//                                         type=\"number\"\n//                                         style={{ width: '100%' }}\n//                                         value={input.remise}\n//                                         onChange={(e) => handleRemiseChange(e, index)}\n//                                     />\n//                                 </div>\n//                             </div>\n//                         ))}\n//                     </div>\n//                 </div>\n//                 <div>\n//                     <div>\n//                         <div style={{ display:\"inline-block\", marginBottom: '20px', textAlign: 'center'}}>\n//                             <button\n//                                 style={{ width: '200px', marginBottom: '10px' }}\n//                                 type=\"button\"\n//                                 onClick={handleAddInput}\n//                             >\n//                                 Ajouter\n//                             </button>\n//                             <button\n//                                 style={{ width: '200px', marginBottom: '10px' }}\n//                                 type=\"submit\"\n//                                 onClick={handleSubmit}\n//                             >\n//                                 Enregistrer\n//                             </button>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>    \n//             <div style={{ marginBottom: '20px' }}>\n//                 <label>Total</label>\n//                 <input\n//                     type=\"number\"\n//                     style={{ width: '100%' }}\n//                     value={calculateTotal()}\n//                     readOnly\n//                 />\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default CreateFactureVente;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nfunction CreateFactureVente({\n  onAddFVente,\n  selectedFacture\n}) {\n  _s();\n  const [client, setClient] = useState('');\n  const [date, setDate] = useState('');\n  const [DT, setDT] = useState('1.000');\n  const [inputs, setInputs] = useState([{\n    refAr: '',\n    quantité: '',\n    price: 0,\n    remise: 0\n  }]);\n  const [references, setReferences] = useState([]);\n  const [telephone, setTelephone] = useState('');\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  useEffect(() => {\n    axios.get('http://localhost:7777/article').then(res => setReferences(res.data.map(article => article.ref))).catch(err => console.log('Error fetching articles:', err));\n  }, []);\n  useEffect(() => {\n    if (selectedFacture) {\n      setClient(selectedFacture.client || '');\n      setDate(selectedFacture.date || '');\n      setDT(selectedFacture.DT || '');\n      setInputs(selectedFacture.inputs || [{\n        refAr: '',\n        quantité: '',\n        price: 0,\n        remise: 0\n      }]);\n      setTelephone(selectedFacture.telephone || '');\n    }\n  }, [selectedFacture]);\n  const fetchPriceByReference = (reference, index) => {\n    axios.get(`http://localhost:7777/factureVente/${reference}`).then(res => {\n      const price = res.data.price;\n      const newInputs = [...inputs];\n      newInputs[index].price = price;\n      setInputs(newInputs);\n    }).catch(err => console.log('Error fetching price:', err));\n  };\n  const handleReferenceChange = (event, index) => {\n    const {\n      value\n    } = event.target;\n    const newInputs = [...inputs];\n    newInputs[index].refAr = value;\n    setInputs(newInputs);\n    fetchPriceByReference(value, index);\n  };\n  const handleRemiseChange = (event, index) => {\n    const {\n      value\n    } = event.target;\n    const newInputs = [...inputs];\n    newInputs[index].remise = value;\n    setInputs(newInputs);\n  };\n  const handleQuantityChange = (event, index) => {\n    const {\n      value\n    } = event.target;\n    const newInputs = [...inputs];\n    newInputs[index].quantité = value;\n    setInputs(newInputs);\n  };\n  const addInput = () => {\n    setInputs([...inputs, {\n      refAr: '',\n      quantité: '',\n      price: 0,\n      remise: 0\n    }]);\n  };\n  const removeInput = index => {\n    const newInputs = [...inputs];\n    newInputs.splice(index, 1);\n    setInputs(newInputs);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const data = {\n      client,\n      date,\n      DT,\n      inputs,\n      telephone\n    };\n    axios.post('http://localhost:7777/factureVente', data).then(res => {\n      onAddFVente(res.data);\n      setClient('');\n      setDate('');\n      setDT('1.000');\n      setInputs([{\n        refAr: '',\n        quantité: '',\n        price: 0,\n        remise: 0\n      }]);\n      setTelephone('');\n      setModalIsOpen(false);\n    }).catch(err => console.log('Error creating factureVente:', err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setModalIsOpen(true),\n      children: \"Cr\\xE9er une facture de vente\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      onRequestClose: () => setModalIsOpen(false),\n      contentLabel: \"Cr\\xE9er une facture de vente\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Cr\\xE9er une facture de vente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"client\",\n            children: \"Client:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"client\",\n            type: \"text\",\n            value: client,\n            onChange: e => setClient(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"date\",\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"date\",\n            type: \"date\",\n            value: date,\n            onChange: e => setDate(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"DT\",\n            children: \"DT:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"DT\",\n            type: \"text\",\n            value: DT,\n            onChange: e => setDT(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this), inputs.map((input, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `refAr-${index}`,\n            children: \"Ref Article:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: `refAr-${index}`,\n            value: input.refAr,\n            onChange: e => handleReferenceChange(e, index),\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"S\\xE9lectionner une r\\xE9f\\xE9rence\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 17\n            }, this), references.map(reference => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: reference,\n              children: reference\n            }, reference, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 19\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `quantité-${index}`,\n            children: \"Quantit\\xE9:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: `quantité-${index}`,\n            type: \"number\",\n            value: input.quantité,\n            onChange: e => handleQuantityChange(e, index),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `price-${index}`,\n            children: \"Prix:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: `price-${index}`,\n            type: \"number\",\n            value: input.price,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `remise-${index}`,\n            children: \"Remise:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: `remise-${index}`,\n            type: \"number\",\n            value: input.remise,\n            onChange: e => handleRemiseChange(e, index),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => removeInput(index),\n            children: \"Supprimer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addInput,\n          children: \"Ajouter une r\\xE9f\\xE9rence\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"telephone\",\n            children: \"T\\xE9l\\xE9phone:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"telephone\",\n            type: \"text\",\n            value: telephone,\n            onChange: e => setTelephone(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Cr\\xE9er\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateFactureVente, \"kX55+aqhV8QSgnMjDc1JqQ9Tto0=\");\n_c = CreateFactureVente;\nexport default CreateFactureVente;\nvar _c;\n$RefreshReg$(_c, \"CreateFactureVente\");","map":{"version":3,"names":["React","useState","useEffect","axios","Modal","jsxDEV","_jsxDEV","setAppElement","CreateFactureVente","onAddFVente","selectedFacture","_s","client","setClient","date","setDate","DT","setDT","inputs","setInputs","refAr","quantité","price","remise","references","setReferences","telephone","setTelephone","modalIsOpen","setModalIsOpen","get","then","res","data","map","article","ref","catch","err","console","log","fetchPriceByReference","reference","index","newInputs","handleReferenceChange","event","value","target","handleRemiseChange","handleQuantityChange","addInput","removeInput","splice","handleSubmit","preventDefault","post","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onRequestClose","contentLabel","onSubmit","htmlFor","id","type","onChange","e","required","input","readOnly","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Bureau/quincaillerie/frontend/src/CreateFactureVente.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import Modal from 'react-modal';\r\n// import FactureVente from './FactureVente';\r\n\r\n// Modal.setAppElement('#root');\r\n\r\n// function CreateFactureVente({ onAddFVente, selectedFacture }) {\r\n//     const [client, setClient] = useState('');\r\n//     const [date, setDate] = useState('');\r\n//     const [DT, setDT] = useState('1.000');\r\n//     const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//     const [references, setReferences] = useState([]);\r\n//     const [telephone, setTelephone] = useState('');\r\n//     const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n//     const openModal = () => {\r\n//         setModalIsOpen(true);\r\n//     };\r\n\r\n//     const closeModal = () => {\r\n//         setModalIsOpen(false);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         axios.get('http://localhost:7777/article')\r\n//             .then(res => {\r\n//                 setReferences(res.data.map(article => article.ref));\r\n//             })\r\n//             .catch(err => console.log('Error fetching articles:', err));\r\n//     }, []);\r\n\r\n//     useEffect(() => {\r\n//         if (selectedFacture) {\r\n//             setClient(selectedFacture.client || '');\r\n//             setDate(selectedFacture.date || '');\r\n//             setDT(selectedFacture.DT || '');\r\n//             setInputs(selectedFacture.inputs || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//             setTelephone(selectedFacture.telephone || '');\r\n//         }\r\n//     }, [selectedFacture]);\r\n\r\n//     const fetchPriceByReference = (reference, index) => {\r\n//         axios.get(`http://localhost:7777/factureVente/${reference}`) \r\n//             .then(res => {\r\n//                 const price = res.data.price;\r\n//                 const newInputs = [...inputs];\r\n//                 newInputs[index].price = price;\r\n//                 setInputs(newInputs);\r\n//             })\r\n//             .catch(err => console.log('Error fetching price:', err));\r\n//     };\r\n\r\n//     const handleReferenceChange = (event, index) => {\r\n//         const { value } = event.target;\r\n//         const newInputs = [...inputs];\r\n//         newInputs[index].refAr = value;\r\n//         setInputs(newInputs);\r\n//         fetchPriceByReference(value, index); \r\n//     };\r\n\r\n//     const handleRemiseChange = (event, index) => {\r\n//         const { value } = event.target;\r\n//         const newInputs = [...inputs];\r\n//         newInputs[index].remise = value;\r\n//         setInputs(newInputs);\r\n//     };\r\n    \r\n//     const handleQuantityChange = (event, index) => {\r\n//         const { value } = event.target;\r\n//         const newInputs = [...inputs];\r\n//         newInputs[index].quantité = value;\r\n\r\n//         axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)\r\n//             .then(res => {\r\n//                 const availableQuantity = res.data.quantity;\r\n//                 const remainingQuantity = availableQuantity - parseInt(value);\r\n\r\n//                 if (remainingQuantity < 0) {\r\n//                     alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);\r\n//                     newInputs[index].quantité = availableQuantity;\r\n//                 }\r\n\r\n//                 const remisePrice = newInputs[index].price * (1 - (newInputs[index].remise / 100));\r\n//                 newInputs[index].price = parseFloat(remisePrice.toFixed(2));\r\n//                 setInputs(newInputs);\r\n//             })\r\n//             .catch(err => console.error('Error fetching quantity:', err));\r\n\r\n//         // Recalculate total\r\n//         const newTotal = newInputs.reduce((acc, curr) => acc + (curr.price * curr.quantité), 0);\r\n//         console.log(\"New Total:\", newTotal);\r\n//     };\r\n    \r\n//     // const handleAddInput = () => {\r\n//     //     // Check if any previous input fields are empty\r\n//     //     const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');\r\n\r\n//     //     // If any previous input field is empty, display an alert\r\n//     //     if (isEmpty) {\r\n//     //         alert(\"Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.\");\r\n//     //         return;\r\n//     //     }\r\n\r\n//     //     // If all previous input fields are filled, add a new input line\r\n//     //     setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);\r\n//     // };\r\n//     const handleAddInput = () => {\r\n//         // Check if any previous input fields are empty\r\n//         const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');\r\n\r\n//         // If any previous input field is empty, display an alert\r\n//         if (isEmpty) {\r\n//             alert(\"Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.\");\r\n//             return;\r\n//         }\r\n\r\n//         // If all previous input fields are filled, add a new input line\r\n//         setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);\r\n//     };\r\n\r\n//     const calculateTotal = () => {\r\n//         if (!inputs) return 0; // Check if inputs array is defined\r\n//         return inputs.reduce((acc, curr) => acc + ((curr.price * curr.quantité) / 100) * (100 - curr.remise), 0);\r\n//     };\r\n\r\n//     const handleSubmit = (event) => {\r\n//         event.preventDefault();\r\n\r\n//         // Filter out empty inputs before checking for invalid references\r\n//         const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\r\n//         const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\r\n\r\n//         if (invalidReference) {\r\n//             alert(\"Sélectionner une référence valide\");\r\n//             return;\r\n//         }\r\n\r\n//         const refArArray = [];\r\n//         const quantiteArray = [];\r\n//         const remiseArray = [];\r\n//         nonEmptyInputs.forEach(input => {\r\n//             refArArray.push(input.refAr);\r\n//             quantiteArray.push(input.quantité);\r\n//             remiseArray.push(input.remise);\r\n//         });\r\n\r\n//         const totalPrice = calculateTotal();\r\n//         axios.post('http://localhost:7777/factureVente/createFac/', {\r\n//             client,\r\n//             date,\r\n//             DT,\r\n//             refAr: refArArray,\r\n//             quantité: quantiteArray,\r\n//             remise: remiseArray,\r\n//             totalPrice\r\n//         })\r\n//             .then(res => {\r\n//                 console.log(res);\r\n//                 window.location.reload();\r\n//             })\r\n//             .catch(err => console.log('Error creating facture:', err))\r\n//     };\r\n\r\n//     return (\r\n//         <div style={{ margin: '20px', justifyContent: 'center' }}>\r\n//             <div style={{ display: 'flex', flex: '1' }}>\r\n//                 <div>\r\n//                     <div style={{ marginBottom: '20px' }}>\r\n//                         <label style={{ width: '120px' }} htmlFor=\"client\">Nom du client</label>\r\n//                         <input\r\n//                             style={{ width: '200px' }}\r\n//                             type=\"text\"\r\n//                             id=\"client\"\r\n//                             value={client}\r\n//                             onChange={(e) => setClient(e.target.value)}\r\n//                         />\r\n//                     </div>\r\n//                     <div style={{ marginBottom: '20px' }}>\r\n//                         <label style={{ width: '120px' }} htmlFor=\"date\">Date</label>\r\n//                         <input\r\n//                             style={{ width: '200px' }}\r\n//                             type=\"date\"\r\n//                             id=\"date\"\r\n//                             value={date}\r\n//                             onChange={(e) => setDate(e.target.value)}\r\n//                         />\r\n//                     </div>\r\n//                     <div style={{ marginBottom: '20px' }}>\r\n//                         <label style={{ width: '120px' }} htmlFor=\"DT\">Droit de timbre</label>\r\n//                         <input\r\n//                             style={{ width: '200px' }}\r\n//                             type=\"text\"\r\n//                             id=\"code\"\r\n//                             value={DT}\r\n//                             onChange={(e) => setDT(e.target.value)}\r\n//                         />\r\n//                     </div>\r\n//                     <div style={{ marginBottom: '20px' }}>\r\n//                         <label style={{ width: '120px' }} htmlFor=\"telephone\">Téléphone</label>\r\n//                         <input\r\n//                             style={{ width: '200px' }}\r\n//                             type=\"text\"\r\n//                             id=\"telephone\"\r\n//                             value={telephone}\r\n//                             onChange={(e) => setTelephone(e.target.value)}\r\n//                         />\r\n//                     </div>\r\n//                 </div>\r\n//                 <div>\r\n//                     <div>\r\n//                         {inputs.map((input, index) => (\r\n//                             <div key={index} style={{ display: 'flex', marginBottom: '10px' }}>\r\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\r\n//                                     <label>Référence d'article</label>\r\n//                                     <input\r\n//                                         list=\"references\"\r\n//                                         style={{ width: '100%' }}\r\n//                                         value={input.refAr}\r\n//                                         onChange={(e) => handleReferenceChange(e, index)}\r\n//                                     />\r\n//                                     <datalist id=\"references\">\r\n//                                         {references.map((reference, idx) => (\r\n//                                             <option key={idx} value={reference} />\r\n//                                         ))}\r\n//                                     </datalist>\r\n//                                 </div>\r\n//                                 <div style={{ flex: '1', marginRight: '10px' }}>\r\n//                                     <label>Prix vente TTC</label>\r\n//                                     <input\r\n//                                         type=\"number\"\r\n//                                         style={{ width: '100%' }}\r\n//                                         value={input.price}\r\n//                                         readOnly\r\n//                                     />\r\n//                                 </div>\r\n//                                 <div style={{ flex: '1', marginRight:'10px' }}>\r\n//                                     <label>Quantité</label>\r\n//                                     <input\r\n//                                         type=\"number\"\r\n//                                         style={{ width: '100%' }}\r\n//                                         value={input.quantité}\r\n//                                         onChange={(e) =>handleQuantityChange(e, index)}\r\n//                                     />\r\n//                                 </div>\r\n//                                 <div style={{ flex: '1' }}>\r\n//                                     <label>Remise</label>\r\n//                                     <input\r\n//                                         type=\"number\"\r\n//                                         style={{ width: '100%' }}\r\n//                                         value={input.remise}\r\n//                                         onChange={(e) => handleRemiseChange(e, index)}\r\n//                                     />\r\n//                                 </div>\r\n//                             </div>\r\n//                         ))}\r\n//                     </div>\r\n//                 </div>\r\n//                 <div>\r\n//                     <div>\r\n//                         <div style={{ display:\"inline-block\", marginBottom: '20px', textAlign: 'center'}}>\r\n//                             <button\r\n//                                 style={{ width: '200px', marginBottom: '10px' }}\r\n//                                 type=\"button\"\r\n//                                 onClick={handleAddInput}\r\n//                             >\r\n//                                 Ajouter\r\n//                             </button>\r\n//                             <button\r\n//                                 style={{ width: '200px', marginBottom: '10px' }}\r\n//                                 type=\"submit\"\r\n//                                 onClick={handleSubmit}\r\n//                             >\r\n//                                 Enregistrer\r\n//                             </button>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>    \r\n//             <div style={{ marginBottom: '20px' }}>\r\n//                 <label>Total</label>\r\n//                 <input\r\n//                     type=\"number\"\r\n//                     style={{ width: '100%' }}\r\n//                     value={calculateTotal()}\r\n//                     readOnly\r\n//                 />\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default CreateFactureVente;\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Modal from 'react-modal';\r\n\r\nModal.setAppElement('#root');\r\n\r\nfunction CreateFactureVente({ onAddFVente, selectedFacture }) {\r\n  const [client, setClient] = useState('');\r\n  const [date, setDate] = useState('');\r\n  const [DT, setDT] = useState('1.000');\r\n  const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n  const [references, setReferences] = useState([]);\r\n  const [telephone, setTelephone] = useState('');\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:7777/article')\r\n      .then(res => setReferences(res.data.map(article => article.ref)))\r\n      .catch(err => console.log('Error fetching articles:', err));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedFacture) {\r\n      setClient(selectedFacture.client || '');\r\n      setDate(selectedFacture.date || '');\r\n      setDT(selectedFacture.DT || '');\r\n      setInputs(selectedFacture.inputs || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n      setTelephone(selectedFacture.telephone || '');\r\n    }\r\n  }, [selectedFacture]);\r\n\r\n  const fetchPriceByReference = (reference, index) => {\r\n    axios.get(`http://localhost:7777/factureVente/${reference}`)\r\n      .then(res => {\r\n        const price = res.data.price;\r\n        const newInputs = [...inputs];\r\n        newInputs[index].price = price;\r\n        setInputs(newInputs);\r\n      })\r\n      .catch(err => console.log('Error fetching price:', err));\r\n  };\r\n\r\n  const handleReferenceChange = (event, index) => {\r\n    const { value } = event.target;\r\n    const newInputs = [...inputs];\r\n    newInputs[index].refAr = value;\r\n    setInputs(newInputs);\r\n    fetchPriceByReference(value, index);\r\n  };\r\n\r\n  const handleRemiseChange = (event, index) => {\r\n    const { value } = event.target;\r\n    const newInputs = [...inputs];\r\n    newInputs[index].remise = value;\r\n    setInputs(newInputs);\r\n  };\r\n\r\n  const handleQuantityChange = (event, index) => {\r\n    const { value } = event.target;\r\n    const newInputs = [...inputs];\r\n    newInputs[index].quantité = value;\r\n    setInputs(newInputs);\r\n  };\r\n\r\n  const addInput = () => {\r\n    setInputs([...inputs, { refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n  };\r\n\r\n  const removeInput = (index) => {\r\n    const newInputs = [...inputs];\r\n    newInputs.splice(index, 1);\r\n    setInputs(newInputs);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const data = { client, date, DT, inputs, telephone };\r\n    axios.post('http://localhost:7777/factureVente', data)\r\n      .then(res => {\r\n        onAddFVente(res.data);\r\n        setClient('');\r\n        setDate('');\r\n        setDT('1.000');\r\n        setInputs([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n        setTelephone('');\r\n        setModalIsOpen(false);\r\n      })\r\n      .catch(err => console.log('Error creating factureVente:', err));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setModalIsOpen(true)}>Créer une facture de vente</button>\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        onRequestClose={() => setModalIsOpen(false)}\r\n        contentLabel=\"Créer une facture de vente\"\r\n      >\r\n        <h2>Créer une facture de vente</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <div>\r\n            <label htmlFor=\"client\">Client:</label>\r\n            <input\r\n              id=\"client\"\r\n              type=\"text\"\r\n              value={client}\r\n              onChange={(e) => setClient(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"date\">Date:</label>\r\n            <input\r\n              id=\"date\"\r\n              type=\"date\"\r\n              value={date}\r\n              onChange={(e) => setDate(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"DT\">DT:</label>\r\n            <input\r\n              id=\"DT\"\r\n              type=\"text\"\r\n              value={DT}\r\n              onChange={(e) => setDT(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          {inputs.map((input, index) => (\r\n            <div key={index}>\r\n              <label htmlFor={`refAr-${index}`}>Ref Article:</label>\r\n              <select\r\n                id={`refAr-${index}`}\r\n                value={input.refAr}\r\n                onChange={(e) => handleReferenceChange(e, index)}\r\n                required\r\n              >\r\n                <option value=\"\">Sélectionner une référence</option>\r\n                {references.map((reference) => (\r\n                  <option key={reference} value={reference}>{reference}</option>\r\n                ))}\r\n              </select>\r\n              <label htmlFor={`quantité-${index}`}>Quantité:</label>\r\n              <input\r\n                id={`quantité-${index}`}\r\n                type=\"number\"\r\n                value={input.quantité}\r\n                onChange={(e) => handleQuantityChange(e, index)}\r\n                required\r\n              />\r\n              <label htmlFor={`price-${index}`}>Prix:</label>\r\n              <input\r\n                id={`price-${index}`}\r\n                type=\"number\"\r\n                value={input.price}\r\n                readOnly\r\n              />\r\n              <label htmlFor={`remise-${index}`}>Remise:</label>\r\n              <input\r\n                id={`remise-${index}`}\r\n                type=\"number\"\r\n                value={input.remise}\r\n                onChange={(e) => handleRemiseChange(e, index)}\r\n                required\r\n              />\r\n              <button type=\"button\" onClick={() => removeInput(index)}>Supprimer</button>\r\n            </div>\r\n          ))}\r\n          <button type=\"button\" onClick={addInput}>Ajouter une référence</button>\r\n          <div>\r\n            <label htmlFor=\"telephone\">Téléphone:</label>\r\n            <input\r\n              id=\"telephone\"\r\n              type=\"text\"\r\n              value={telephone}\r\n              onChange={(e) => setTelephone(e.target.value)}\r\n              required\r\n            />\r\n          </div>\r\n          <button type=\"submit\">Créer</button>\r\n        </form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateFactureVente;\r\n"],"mappings":";;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}