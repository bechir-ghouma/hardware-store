{"ast":null,"code":"// import React, { useState, useEffect, useRef } from 'react';\n// import axios from 'axios';\n\n// function Cfvbscfa({ selectedFacture }) {\n//   const [clName, setClName] = useState('');\n//   const [client_id, setClientCode] = useState('');\n//   const [date, setDate] = useState('');\n//   const [DT, setDT] = useState('1.000');\n//   const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//   const [references, setReferences] = useState([]);\n//   const [filteredClients, setFilteredClients] = useState([]);\n\n//   const remiseInputRef = useRef(null);\n\n//   useEffect(() => {\n//     axios.get('http://localhost:7777/articlesbsvcf')\n//       .then(res => {\n//         console.log('Fetched Articles:', res.data);\n//         const parsedArticles = res.data;\n//         setReferences(parsedArticles.map(article => article.refAr));\n//         setInputs(parsedArticles);\n//       })\n//       .catch(err => console.log('Error fetching articles:', err));\n//   }, []);\n\n//   useEffect(() => {\n//     if (selectedFacture) {\n//       console.log('Selected Facture in CreateFactureVente:', selectedFacture);\n//       setClName(selectedFacture.clName || '');\n//       setClientCode(selectedFacture.client_id || '');\n//       setDate(selectedFacture.date || '');\n//       setDT(selectedFacture.DT || '1.000');\n//       setInputs(selectedFacture.articles || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//     }\n//   }, [selectedFacture]);\n\n//   const fetchPriceByReference = (reference, index) => {\n//     axios.get(`http://localhost:7777/cfvbscf/${reference}`)\n//       .then(res => {\n//         const price = res.data.price;\n//         const newInputs = [...inputs];\n//         newInputs[index].price = price;\n//         setInputs(newInputs);\n//       })\n//       .catch(err => console.log('Error fetching price:', err));\n//   };\n\n//   const handleReferenceChange = (event, index) => {\n//     const { value } = event.target;\n//     const newInputs = [...inputs];\n//     newInputs[index].refAr = value;\n//     setInputs(newInputs);\n//     fetchPriceByReference(value, index);\n//   };\n\n//   const handleRemiseChange = (event, index) => {\n//     const { value } = event.target;\n//     const newInputs = [...inputs];\n//     newInputs[index].remise = value;\n//     setInputs(newInputs);\n//   };\n\n//   const handleQuantityChange = (event, index) => {\n//     const { value } = event.target;\n//     const newInputs = [...inputs];\n//     newInputs[index].quantité = value;\n\n//     if (!isNaN(value) && value !== '') {\n//       axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)\n//         .then(res => {\n//           const availableQuantity = res.data.quantity;\n//           const remainingQuantity = availableQuantity - parseInt(value);\n\n//           if (remainingQuantity < 0) {\n//             alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);\n//             newInputs[index].quantité = availableQuantity; \n//           }\n\n//           setInputs(newInputs);\n//         })\n//         .catch(err => console.error('Error fetching quantity:', err));\n//     } else {\n//       alert('Veuillez entrer une quantité valide.');\n//     }\n//   };\n\n//   const handleAddInput = () => {\n//     const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');\n//     if (isEmpty) {\n//       alert(\"Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.\");\n//       return;\n//     }\n//     setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);\n//   };\n\n//   const calculateTotal = () => {\n//     if (!inputs) return 0;\n//     const total = inputs.reduce((acc, curr) => acc + (curr.price * curr.quantité) * (1 - (curr.remise / 100)), 0) + parseFloat(DT);\n//     return total.toFixed(3);\n//   };\n\n// const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\n//     const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\n\n//     if (invalidReference) {\n//       alert(\"Sélectionner une référence valide\");\n//       return;\n//     }\n\n//     const refArArray = nonEmptyInputs.map(input => ({\n//       refAr: input.refAr,\n//       price: input.price,\n//       quantité: input.quantité,\n//       remise: input.remise\n//     }));\n\n//     const totalPrice = calculateTotal();\n//     try {\n//       console.log('Submitting data:', {\n//         clName,\n//         client_id,\n//         date,\n//         DT,\n//         refAr: refArArray,\n//         totalPrice\n//       });\n\n//       const res = await axios.post('http://localhost:7777/cfvbscf/', {\n//         clName,\n//         client_id,\n//         date,\n//         DT,\n//         refAr: refArArray,\n//         totalPrice\n//       });\n\n//       console.log('Response:', res.data);\n//       handleClear(); \n//       window.location.reload();\n//     } catch (err) {\n//       console.error('Error creating facture:', err.response ? err.response.data : err);\n//     }\n//   };\n\n//   const handleKeyPress = (event) => {\n//     if (event.key === 'Enter') {\n//       handleAddInput();\n//     }\n//   };\n\n//   const handleClientSelect = (name, code) => {\n//     setClName(name);\n//     setClientCode(code);\n//     setFilteredClients([]);\n//   };\n\n//   const handleClientChange = (e) => {\n//     const { value } = e.target;\n//     setClName(value);\n\n//     axios.get(`http://localhost:7777/clients/search?name=${value}`)\n//       .then(res => {\n//         setFilteredClients(res.data);\n//       })\n//       .catch(err => console.log('Error fetching clients:', err));\n\n//     axios.get(`http://localhost:7777/clients/search?name=${value}`)\n//       .then(res => {\n//         if (res.data.length > 0) {\n//           setClientCode(res.data[0].clID);\n//         } else {\n//           setClientCode('');\n//         }\n//       })\n//       .catch(err => console.log('Error fetching client code:', err));\n//   };\n\n//   const handleClientBlur = () => {\n//     setFilteredClients([]);\n//   };\n\n//   const handleClientCodeChange = (e) => {\n//     const { value } = e.target;\n//     setClientCode(value);\n\n//     axios.get(`http://localhost:7777/clients/search?id=${value}`)\n//       .then(res => {\n//         if (res.data.length > 0) {\n//           setClName(res.data[0].clName);\n//         } else {\n//           setClName('');\n//         }\n//       })\n//       .catch(err => console.log('Error fetching client name:', err));\n//   };\n\n//   const handleUpdate = async (event) => {\n//     event.preventDefault();\n\n//     const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\n//     const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\n\n//     if (invalidReference) {\n//       alert(\"Sélectionner une référence valide\");\n//       return;\n//     }\n\n//     const refArArray = nonEmptyInputs.map(input => ({\n//       refAr: input.refAr,\n//       price: input.price,\n//       quantité: input.quantité,\n//       remise: input.remise\n//     }));\n\n//     const totalPrice = calculateTotal();\n//     try {\n//       const res = await axios.put(`http://localhost:7777/cfvbscf/update/${selectedFacture.id}`, {\n//         clName,\n//         client_id,\n//         date,\n//         DT,\n//         articles: refArArray,\n//         totalPrice\n//       });\n//       console.log(res.data);\n//       window.location.reload();\n//     } catch (err) {\n//       console.log('Error updating facture:', err);\n//     }\n//   };\n\n//   const handleClear = () => {\n//     setClName('');\n//     setClientCode('');\n//     setDate('');\n//     setDT('1.000');\n//     setInputs([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//   };\n\n//   return (\n//     <div style={{ margin: '20px', display: 'flex', flexDirection: 'column', alignItems: 'center', fontFamily: 'Arial, sans-serif', backgroundColor: '#f9f9f9', padding: '20px', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>\n//       <h2 style={{ marginBottom: '20px' }}>{selectedFacture ? 'Modifier Facture Vente' : 'Créer Facture Vente'}</h2>\n//       <form onSubmit={selectedFacture ? handleUpdate : handleSubmit} style={{ width: '100%', maxWidth: '600px' }}>\n//         <div style={{ marginBottom: '15px' }}>\n//           <label style={{ display: 'block', marginBottom: '5px' }}>Nom du client:</label>\n//           <input\n//             type=\"text\"\n//             value={clName}\n//             onChange={handleClientChange}\n//             onBlur={handleClientBlur}\n//             style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd', marginBottom: '5px' }}\n//           />\n//           {filteredClients.length > 0 && (\n//             <ul style={{ listStyleType: 'none', padding: '0', margin: '0', border: '1px solid #ddd', borderRadius: '4px', maxHeight: '100px', overflowY: 'auto' }}>\n//               {filteredClients.map(client => (\n//                 <li key={client.clID} onClick={() => handleClientSelect(client.clName, client.clID)} style={{ padding: '8px', cursor: 'pointer', backgroundColor: '#fff', borderBottom: '1px solid #ddd' }}>\n//                   {client.clName}\n//                 </li>\n//               ))}\n//             </ul>\n//           )}\n//         </div>\n//         <div style={{ marginBottom: '15px' }}>\n//           <label style={{ display: 'block', marginBottom: '5px' }}>Code client:</label>\n//           <input\n//             type=\"text\"\n//             value={client_id}\n//             onChange={handleClientCodeChange}\n//             style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}\n//           />\n//         </div>\n//         <div style={{ marginBottom: '15px' }}>\n//           <label style={{ display: 'block', marginBottom: '5px' }}>Date:</label>\n//           <input\n//             type=\"date\"\n//             value={date}\n//             onChange={e => setDate(e.target.value)}\n//             style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}\n//           />\n//         </div>\n//         <div style={{ marginBottom: '15px' }}>\n//           <label style={{ display: 'block', marginBottom: '5px' }}>DT:</label>\n//           <input\n//             type=\"text\"\n//             value={DT}\n//             onChange={e => setDT(e.target.value)}\n//             style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}\n//           />\n//         </div>\n//         <table style={{ width: '100%', borderCollapse: 'collapse', marginBottom: '15px' }}>\n//           <thead>\n//             <tr>\n//               <th style={{ padding: '8px', border: '1px solid #ddd', backgroundColor: '#f1f1f1' }}>Référence Article</th>\n//               <th style={{ padding: '8px', border: '1px solid #ddd', backgroundColor: '#f1f1f1' }}>Quantité</th>\n//               <th style={{ padding: '8px', border: '1px solid #ddd', backgroundColor: '#f1f1f1' }}>Prix</th>\n//               <th style={{ padding: '8px', border: '1px solid #ddd', backgroundColor: '#f1f1f1' }}>Remise</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {inputs.map((input, index) => (\n//               <tr key={index}>\n//                 <td style={{ padding: '8px', border: '1px solid #ddd' }}>\n//                   <input\n//                     type=\"text\"\n//                     value={input.refAr}\n//                     onChange={e => handleReferenceChange(e, index)}\n//                     style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}\n//                   />\n//                 </td>\n//                 <td style={{ padding: '8px', border: '1px solid #ddd' }}>\n//                   <input\n//                     type=\"text\"\n//                     value={input.quantité}\n//                     onChange={e => handleQuantityChange(e, index)}\n//                     style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}\n//                   />\n//                 </td>\n//                 <td style={{ padding: '8px', border: '1px solid #ddd' }}>\n//                   <input\n//                     type=\"text\"\n//                     value={input.price}\n//                     readOnly\n//                     style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd', backgroundColor: '#f9f9f9' }}\n//                   />\n//                 </td>\n//                 <td style={{ padding: '8px', border: '1px solid #ddd' }}>\n//                   <input\n//                     type=\"text\"\n//                     value={input.remise}\n//                     onChange={e => handleRemiseChange(e, index)}\n//                     ref={remiseInputRef}\n//                     onKeyPress={handleKeyPress}\n//                     style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}\n//                   />\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//         <button type=\"button\" onClick={handleAddInput} style={{ padding: '10px 20px', borderRadius: '4px', border: 'none', backgroundColor: '#007bff', color: '#fff', cursor: 'pointer', marginBottom: '15px' }}>\n//           Ajouter une ligne\n//         </button>\n//         <p style={{ fontSize: '16px', fontWeight: 'bold' }}>Total: {calculateTotal()} DT</p>\n//         <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n//           <button type=\"submit\" style={{ padding: '10px 20px', borderRadius: '4px', border: 'none', backgroundColor: '#28a745', color: '#fff', cursor: 'pointer' }}>\n//             {selectedFacture ? 'Mettre à jour la facture' : 'Créer la facture'}\n//           </button>\n//           {/* <button type=\"button\" onClick={handleClear} style={{ padding: '10px 20px', borderRadius: '4px', border: 'none', backgroundColor: '#dc3545', color: '#fff', cursor: 'pointer' }}>\n//             Effacer\n//           </button> */}\n//         </div>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default Cfvbscfa;\n// import React, { useState, useEffect, useRef } from 'react';\n// import axios from 'axios';\n\n// function Cfvbscfa({ selectedFacture }) {\n//   const [clName, setClName] = useState('');\n//   const [client_id, setClientCode] = useState('');\n//   const [date, setDate] = useState('');\n//   const [DT, setDT] = useState('1.000');\n//   const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//   const [references, setReferences] = useState([]);\n//   const [filteredClients, setFilteredClients] = useState([]);\n//   const [articles, setArticles] = useState([]);\n//   const [filteredArticles, setFilteredArticles] = useState([]);\n\n//   const remiseInputRef = useRef(null);\n\n//   useEffect(() => {\n//     axios.get('http://localhost:7777/articlesbsvcf')\n//       .then(res => {\n//         console.log('Fetched Articles:', res.data);\n//         const parsedArticles = res.data;\n//         setArticles(parsedArticles);\n//         setReferences(parsedArticles.map(article => article.refAr));\n//       })\n//       .catch(err => console.log('Error fetching articles:', err));\n//   }, []);\n\n//   useEffect(() => {\n//     if (selectedFacture) {\n//       console.log('Selected Facture in CreateFactureVente:', selectedFacture);\n//       setClName(selectedFacture.clName || '');\n//       setClientCode(selectedFacture.client_id || '');\n//       setDate(selectedFacture.date || '');\n//       setDT(selectedFacture.DT || '1.000');\n//       setInputs(selectedFacture.articles || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//     }\n//   }, [selectedFacture]);\n\n//   const fetchPriceByReference = (reference, index) => {\n//     axios.get(`http://localhost:7777/cfvbscf/${reference}`)\n//       .then(res => {\n//         const price = res.data.price;\n//         const newInputs = [...inputs];\n//         newInputs[index].price = price;\n//         setInputs(newInputs);\n//       })\n//       .catch(err => console.log('Error fetching price:', err));\n//   };\n\n//   const handleReferenceChange = (event, index) => {\n//     const { value } = event.target;\n//     const newInputs = [...inputs];\n//     newInputs[index].refAr = value;\n//     setInputs(newInputs);\n//     fetchPriceByReference(value, index);\n//   };\n\n//   const handleRemiseChange = (event, index) => {\n//     const { value } = event.target;\n//     const newInputs = [...inputs];\n//     newInputs[index].remise = value;\n//     setInputs(newInputs);\n//   };\n\n//   const handleQuantityChange = (event, index) => {\n//     const { value } = event.target;\n//     const newInputs = [...inputs];\n//     newInputs[index].quantité = value;\n\n//     if (!isNaN(value) && value !== '') {\n//       axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)\n//         .then(res => {\n//           const availableQuantity = res.data.quantity;\n//           const remainingQuantity = availableQuantity - parseInt(value);\n\n//           if (remainingQuantity < 0) {\n//             alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);\n//             newInputs[index].quantité = availableQuantity; \n//           }\n\n//           setInputs(newInputs);\n//         })\n//         .catch(err => console.error('Error fetching quantity:', err));\n//     } else {\n//       alert('Veuillez entrer une quantité valide.');\n//     }\n//   };\n\n//   const handleAddInput = () => {\n//     const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');\n//     if (isEmpty) {\n//       alert(\"Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.\");\n//       return;\n//     }\n//     setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);\n//   };\n\n//   const calculateTotal = () => {\n//     if (!inputs) return 0;\n//     const total = inputs.reduce((acc, curr) => acc + (curr.price * curr.quantité) * (1 - (curr.remise / 100)), 0) + parseFloat(DT);\n//     return total.toFixed(3);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\n//     const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\n\n//     if (invalidReference) {\n//       alert(\"Sélectionner une référence valide\");\n//       return;\n//     }\n\n//     const refArArray = nonEmptyInputs.map(input => ({\n//       refAr: input.refAr,\n//       price: input.price,\n//       quantité: input.quantité,\n//       remise: input.remise\n//     }));\n\n//     const totalPrice = calculateTotal();\n//     try {\n//       console.log('Submitting data:', {\n//         clName,\n//         client_id,\n//         date,\n//         DT,\n//         refAr: refArArray,\n//         totalPrice\n//       });\n\n//       const res = await axios.post('http://localhost:7777/cfvbscf/', {\n//         clName,\n//         client_id,\n//         date,\n//         DT,\n//         refAr: refArArray,\n//         totalPrice\n//       });\n\n//       console.log('Response:', res.data);\n//       handleClear(); \n//       window.location.reload();\n//     } catch (err) {\n//       console.error('Error creating facture:', err.response ? err.response.data : err);\n//     }\n//   };\n\n//   const handleKeyPress = (event) => {\n//     if (event.key === 'Enter') {\n//       handleAddInput();\n//     }\n//   };\n\n//   const handleClientSelect = (name, code) => {\n//     setClName(name);\n//     setClientCode(code);\n//     setFilteredClients([]);\n//   };\n\n//   const handleClientChange = (e) => {\n//     const { value } = e.target;\n//     setClName(value);\n\n//     axios.get(`http://localhost:7777/clients/search?name=${value}`)\n//       .then(res => {\n//         setFilteredClients(res.data);\n//       })\n//       .catch(err => console.log('Error fetching clients:', err));\n\n//     axios.get(`http://localhost:7777/clients/search?name=${value}`)\n//       .then(res => {\n//         if (res.data.length > 0) {\n//           setClientCode(res.data[0].clID);\n//         } else {\n//           setClientCode('');\n//         }\n//       })\n//       .catch(err => console.log('Error fetching client code:', err));\n\n//     // Filter articles based on client name\n//     const filtered = articles.filter(article =>\n//       article.clName && article.clName.toLowerCase().includes(value.toLowerCase())\n//     );\n//     setFilteredArticles(filtered);\n//   };\n\n//   const handleClientBlur = () => {\n//     setFilteredClients([]);\n//   };\n\n//   const handleClientCodeChange = (e) => {\n//     const { value } = e.target;\n//     setClientCode(value);\n\n//     axios.get(`http://localhost:7777/clients/search?id=${value}`)\n//       .then(res => {\n//         if (res.data.length > 0) {\n//           setClName(res.data[0].clName);\n//         } else {\n//           setClName('');\n//         }\n//       })\n//       .catch(err => console.log('Error fetching client name:', err));\n\n//     // Filter articles based on client code\n//     const filtered = articles.filter(article =>\n//       article.client_id && article.client_id.toLowerCase().includes(value.toLowerCase())\n//     );\n//     setFilteredArticles(filtered);\n//   };\n\n//   const handleUpdate = async (event) => {\n//     event.preventDefault();\n\n//     const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\n//     const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\n\n//     if (invalidReference) {\n//       alert(\"Sélectionner une référence valide\");\n//       return;\n//     }\n\n//     const refArArray = nonEmptyInputs.map(input => ({\n//       refAr: input.refAr,\n//       price: input.price,\n//       quantité: input.quantité,\n//       remise: input.remise\n//     }));\n\n//     const totalPrice = calculateTotal();\n//     try {\n//       const res = await axios.put(`http://localhost:7777/cfvbscf/update/${selectedFacture.id}`, {\n//         clName,\n//         client_id,\n//         date,\n//         DT,\n//         articles: refArArray,\n//         totalPrice\n//       });\n//       console.log(res.data);\n//       window.location.reload();\n//     } catch (err) {\n//       console.log('Error updating facture:', err);\n//     }\n//   };\n\n//   const handleClear = () => {\n//     setClName('');\n//     setClientCode('');\n//     setDate('');\n//     setDT('1.000');\n//     setInputs([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\n//   };\n\n//   return (\n//     <div style={{ margin: '20px', display: 'flex', flexDirection: 'column', alignItems: 'center', fontFamily: 'Arial, sans-serif', backgroundColor: '#f9f9f9', padding: '20px', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>\n//       <h2 style={{ marginBottom: '20px' }}>Création Facture Vente</h2>\n//       <form onSubmit={selectedFacture ? handleUpdate : handleSubmit} style={{ width: '100%', maxWidth: '800px' }}>\n//         <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '10px' }}>\n//           <div style={{ width: '48%' }}>\n//             <label htmlFor=\"clName\" style={{ display: 'block', marginBottom: '5px' }}>Nom Client</label>\n//             <input\n//               type=\"text\"\n//               id=\"clName\"\n//               value={clName}\n//               onChange={handleClientChange}\n//               onBlur={handleClientBlur}\n//               style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//               list=\"clientSuggestions\"\n//               required\n//             />\n//             <datalist id=\"clientSuggestions\">\n//               {filteredClients.map((client, index) => (\n//                 <option key={index} value={client.clName} onClick={() => handleClientSelect(client.clName, client.clID)} />\n//               ))}\n//             </datalist>\n//           </div>\n//           <div style={{ width: '48%' }}>\n//             <label htmlFor=\"clientCode\" style={{ display: 'block', marginBottom: '5px' }}>Code Client</label>\n//             <input\n//               type=\"text\"\n//               id=\"clientCode\"\n//               value={client_id}\n//               onChange={handleClientCodeChange}\n//               style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//               required\n//             />\n//           </div>\n//         </div>\n//         <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '10px' }}>\n//           <div style={{ width: '48%' }}>\n//             <label htmlFor=\"date\" style={{ display: 'block', marginBottom: '5px' }}>Date</label>\n//             <input\n//               type=\"date\"\n//               id=\"date\"\n//               value={date}\n//               onChange={e => setDate(e.target.value)}\n//               style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//               required\n//             />\n//           </div>\n//           <div style={{ width: '48%' }}>\n//             <label htmlFor=\"DT\" style={{ display: 'block', marginBottom: '5px' }}>DT</label>\n//             <input\n//               type=\"text\"\n//               id=\"DT\"\n//               value={DT}\n//               onChange={e => setDT(e.target.value)}\n//               style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//               required\n//             />\n//           </div>\n//         </div>\n//         <div style={{ marginBottom: '10px' }}>\n//           <label style={{ display: 'block', marginBottom: '5px' }}>Articles</label>\n//           {inputs.map((input, index) => (\n//             <div key={index} style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '10px' }}>\n//               <input\n//                 type=\"text\"\n//                 value={input.refAr}\n//                 onChange={e => handleReferenceChange(e, index)}\n//                 placeholder=\"Référence\"\n//                 list=\"articleReferences\"\n//                 style={{ width: '24%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//                 required\n//               />\n//               <datalist id=\"articleReferences\">\n//                 {references.map((reference, index) => (\n//                   <option key={index} value={reference} />\n//                 ))}\n//               </datalist>\n//               <input\n//                 type=\"number\"\n//                 value={input.price}\n//                 placeholder=\"Prix\"\n//                 readOnly\n//                 style={{ width: '24%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//               />\n//               <input\n//                 type=\"number\"\n//                 value={input.quantité}\n//                 onChange={e => handleQuantityChange(e, index)}\n//                 placeholder=\"Quantité\"\n//                 style={{ width: '24%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//                 required\n//               />\n//               <input\n//                 type=\"number\"\n//                 value={input.remise}\n//                 onChange={e => handleRemiseChange(e, index)}\n//                 placeholder=\"Remise (%)\"\n//                 style={{ width: '24%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//                 required\n//                 onKeyDown={handleKeyPress}\n//                 ref={remiseInputRef}\n//               />\n//             </div>\n//           ))}\n//           <button type=\"button\" onClick={handleAddInput} style={{ padding: '8px 12px', borderRadius: '4px', backgroundColor: '#007bff', color: '#fff', border: 'none', cursor: 'pointer' }}>\n//             Ajouter une ligne\n//           </button>\n//         </div>\n//         <div style={{ marginBottom: '10px' }}>\n//           <label htmlFor=\"total\" style={{ display: 'block', marginBottom: '5px' }}>Total</label>\n//           <input\n//             type=\"text\"\n//             id=\"total\"\n//             value={calculateTotal()}\n//             readOnly\n//             style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\n//           />\n//         </div>\n//         <button type=\"submit\" style={{ padding: '10px 15px', borderRadius: '4px', backgroundColor: '#28a745', color: '#fff', border: 'none', cursor: 'pointer' }}>\n//           {selectedFacture ? 'Mettre à jour' : 'Soumettre'}\n//         </button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default Cfvbscfa;","map":{"version":3,"names":[],"sources":["C:/Users/Dell/OneDrive/Bureau/quincaillerie/frontend/src/Cfvbscfa.js"],"sourcesContent":["// import React, { useState, useEffect, useRef } from 'react';\r\n// import axios from 'axios';\r\n\r\n// function Cfvbscfa({ selectedFacture }) {\r\n//   const [clName, setClName] = useState('');\r\n//   const [client_id, setClientCode] = useState('');\r\n//   const [date, setDate] = useState('');\r\n//   const [DT, setDT] = useState('1.000');\r\n//   const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//   const [references, setReferences] = useState([]);\r\n//   const [filteredClients, setFilteredClients] = useState([]);\r\n\r\n//   const remiseInputRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:7777/articlesbsvcf')\r\n//       .then(res => {\r\n//         console.log('Fetched Articles:', res.data);\r\n//         const parsedArticles = res.data;\r\n//         setReferences(parsedArticles.map(article => article.refAr));\r\n//         setInputs(parsedArticles);\r\n//       })\r\n//       .catch(err => console.log('Error fetching articles:', err));\r\n//   }, []);\r\n  \r\n//   useEffect(() => {\r\n//     if (selectedFacture) {\r\n//       console.log('Selected Facture in CreateFactureVente:', selectedFacture);\r\n//       setClName(selectedFacture.clName || '');\r\n//       setClientCode(selectedFacture.client_id || '');\r\n//       setDate(selectedFacture.date || '');\r\n//       setDT(selectedFacture.DT || '1.000');\r\n//       setInputs(selectedFacture.articles || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//     }\r\n//   }, [selectedFacture]);\r\n\r\n//   const fetchPriceByReference = (reference, index) => {\r\n//     axios.get(`http://localhost:7777/cfvbscf/${reference}`)\r\n//       .then(res => {\r\n//         const price = res.data.price;\r\n//         const newInputs = [...inputs];\r\n//         newInputs[index].price = price;\r\n//         setInputs(newInputs);\r\n//       })\r\n//       .catch(err => console.log('Error fetching price:', err));\r\n//   };\r\n\r\n//   const handleReferenceChange = (event, index) => {\r\n//     const { value } = event.target;\r\n//     const newInputs = [...inputs];\r\n//     newInputs[index].refAr = value;\r\n//     setInputs(newInputs);\r\n//     fetchPriceByReference(value, index);\r\n//   };\r\n\r\n//   const handleRemiseChange = (event, index) => {\r\n//     const { value } = event.target;\r\n//     const newInputs = [...inputs];\r\n//     newInputs[index].remise = value;\r\n//     setInputs(newInputs);\r\n//   };\r\n\r\n//   const handleQuantityChange = (event, index) => {\r\n//     const { value } = event.target;\r\n//     const newInputs = [...inputs];\r\n//     newInputs[index].quantité = value;\r\n\r\n//     if (!isNaN(value) && value !== '') {\r\n//       axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)\r\n//         .then(res => {\r\n//           const availableQuantity = res.data.quantity;\r\n//           const remainingQuantity = availableQuantity - parseInt(value);\r\n\r\n//           if (remainingQuantity < 0) {\r\n//             alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);\r\n//             newInputs[index].quantité = availableQuantity; \r\n//           }\r\n\r\n//           setInputs(newInputs);\r\n//         })\r\n//         .catch(err => console.error('Error fetching quantity:', err));\r\n//     } else {\r\n//       alert('Veuillez entrer une quantité valide.');\r\n//     }\r\n//   };\r\n\r\n//   const handleAddInput = () => {\r\n//     const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');\r\n//     if (isEmpty) {\r\n//       alert(\"Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.\");\r\n//       return;\r\n//     }\r\n//     setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);\r\n//   };\r\n\r\n//   const calculateTotal = () => {\r\n//     if (!inputs) return 0;\r\n//     const total = inputs.reduce((acc, curr) => acc + (curr.price * curr.quantité) * (1 - (curr.remise / 100)), 0) + parseFloat(DT);\r\n//     return total.toFixed(3);\r\n//   };\r\n\r\n// const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n  \r\n//     const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\r\n//     const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\r\n  \r\n//     if (invalidReference) {\r\n//       alert(\"Sélectionner une référence valide\");\r\n//       return;\r\n//     }\r\n  \r\n//     const refArArray = nonEmptyInputs.map(input => ({\r\n//       refAr: input.refAr,\r\n//       price: input.price,\r\n//       quantité: input.quantité,\r\n//       remise: input.remise\r\n//     }));\r\n  \r\n//     const totalPrice = calculateTotal();\r\n//     try {\r\n//       console.log('Submitting data:', {\r\n//         clName,\r\n//         client_id,\r\n//         date,\r\n//         DT,\r\n//         refAr: refArArray,\r\n//         totalPrice\r\n//       });\r\n  \r\n//       const res = await axios.post('http://localhost:7777/cfvbscf/', {\r\n//         clName,\r\n//         client_id,\r\n//         date,\r\n//         DT,\r\n//         refAr: refArArray,\r\n//         totalPrice\r\n//       });\r\n  \r\n//       console.log('Response:', res.data);\r\n//       handleClear(); \r\n//       window.location.reload();\r\n//     } catch (err) {\r\n//       console.error('Error creating facture:', err.response ? err.response.data : err);\r\n//     }\r\n//   };\r\n  \r\n\r\n//   const handleKeyPress = (event) => {\r\n//     if (event.key === 'Enter') {\r\n//       handleAddInput();\r\n//     }\r\n//   };\r\n\r\n//   const handleClientSelect = (name, code) => {\r\n//     setClName(name);\r\n//     setClientCode(code);\r\n//     setFilteredClients([]);\r\n//   };\r\n\r\n//   const handleClientChange = (e) => {\r\n//     const { value } = e.target;\r\n//     setClName(value);\r\n\r\n//     axios.get(`http://localhost:7777/clients/search?name=${value}`)\r\n//       .then(res => {\r\n//         setFilteredClients(res.data);\r\n//       })\r\n//       .catch(err => console.log('Error fetching clients:', err));\r\n\r\n//     axios.get(`http://localhost:7777/clients/search?name=${value}`)\r\n//       .then(res => {\r\n//         if (res.data.length > 0) {\r\n//           setClientCode(res.data[0].clID);\r\n//         } else {\r\n//           setClientCode('');\r\n//         }\r\n//       })\r\n//       .catch(err => console.log('Error fetching client code:', err));\r\n//   };\r\n\r\n//   const handleClientBlur = () => {\r\n//     setFilteredClients([]);\r\n//   };\r\n\r\n//   const handleClientCodeChange = (e) => {\r\n//     const { value } = e.target;\r\n//     setClientCode(value);\r\n\r\n//     axios.get(`http://localhost:7777/clients/search?id=${value}`)\r\n//       .then(res => {\r\n//         if (res.data.length > 0) {\r\n//           setClName(res.data[0].clName);\r\n//         } else {\r\n//           setClName('');\r\n//         }\r\n//       })\r\n//       .catch(err => console.log('Error fetching client name:', err));\r\n//   };\r\n\r\n//   const handleUpdate = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\r\n//     const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\r\n\r\n//     if (invalidReference) {\r\n//       alert(\"Sélectionner une référence valide\");\r\n//       return;\r\n//     }\r\n\r\n//     const refArArray = nonEmptyInputs.map(input => ({\r\n//       refAr: input.refAr,\r\n//       price: input.price,\r\n//       quantité: input.quantité,\r\n//       remise: input.remise\r\n//     }));\r\n\r\n//     const totalPrice = calculateTotal();\r\n//     try {\r\n//       const res = await axios.put(`http://localhost:7777/cfvbscf/update/${selectedFacture.id}`, {\r\n//         clName,\r\n//         client_id,\r\n//         date,\r\n//         DT,\r\n//         articles: refArArray,\r\n//         totalPrice\r\n//       });\r\n//       console.log(res.data);\r\n//       window.location.reload();\r\n//     } catch (err) {\r\n//       console.log('Error updating facture:', err);\r\n//     }\r\n//   };\r\n  \r\n//   const handleClear = () => {\r\n//     setClName('');\r\n//     setClientCode('');\r\n//     setDate('');\r\n//     setDT('1.000');\r\n//     setInputs([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ margin: '20px', display: 'flex', flexDirection: 'column', alignItems: 'center', fontFamily: 'Arial, sans-serif', backgroundColor: '#f9f9f9', padding: '20px', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>\r\n//       <h2 style={{ marginBottom: '20px' }}>{selectedFacture ? 'Modifier Facture Vente' : 'Créer Facture Vente'}</h2>\r\n//       <form onSubmit={selectedFacture ? handleUpdate : handleSubmit} style={{ width: '100%', maxWidth: '600px' }}>\r\n//         <div style={{ marginBottom: '15px' }}>\r\n//           <label style={{ display: 'block', marginBottom: '5px' }}>Nom du client:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             value={clName}\r\n//             onChange={handleClientChange}\r\n//             onBlur={handleClientBlur}\r\n//             style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd', marginBottom: '5px' }}\r\n//           />\r\n//           {filteredClients.length > 0 && (\r\n//             <ul style={{ listStyleType: 'none', padding: '0', margin: '0', border: '1px solid #ddd', borderRadius: '4px', maxHeight: '100px', overflowY: 'auto' }}>\r\n//               {filteredClients.map(client => (\r\n//                 <li key={client.clID} onClick={() => handleClientSelect(client.clName, client.clID)} style={{ padding: '8px', cursor: 'pointer', backgroundColor: '#fff', borderBottom: '1px solid #ddd' }}>\r\n//                   {client.clName}\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           )}\r\n//         </div>\r\n//         <div style={{ marginBottom: '15px' }}>\r\n//           <label style={{ display: 'block', marginBottom: '5px' }}>Code client:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             value={client_id}\r\n//             onChange={handleClientCodeChange}\r\n//             style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}\r\n//           />\r\n//         </div>\r\n//         <div style={{ marginBottom: '15px' }}>\r\n//           <label style={{ display: 'block', marginBottom: '5px' }}>Date:</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             value={date}\r\n//             onChange={e => setDate(e.target.value)}\r\n//             style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}\r\n//           />\r\n//         </div>\r\n//         <div style={{ marginBottom: '15px' }}>\r\n//           <label style={{ display: 'block', marginBottom: '5px' }}>DT:</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             value={DT}\r\n//             onChange={e => setDT(e.target.value)}\r\n//             style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}\r\n//           />\r\n//         </div>\r\n//         <table style={{ width: '100%', borderCollapse: 'collapse', marginBottom: '15px' }}>\r\n//           <thead>\r\n//             <tr>\r\n//               <th style={{ padding: '8px', border: '1px solid #ddd', backgroundColor: '#f1f1f1' }}>Référence Article</th>\r\n//               <th style={{ padding: '8px', border: '1px solid #ddd', backgroundColor: '#f1f1f1' }}>Quantité</th>\r\n//               <th style={{ padding: '8px', border: '1px solid #ddd', backgroundColor: '#f1f1f1' }}>Prix</th>\r\n//               <th style={{ padding: '8px', border: '1px solid #ddd', backgroundColor: '#f1f1f1' }}>Remise</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {inputs.map((input, index) => (\r\n//               <tr key={index}>\r\n//                 <td style={{ padding: '8px', border: '1px solid #ddd' }}>\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     value={input.refAr}\r\n//                     onChange={e => handleReferenceChange(e, index)}\r\n//                     style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}\r\n//                   />\r\n//                 </td>\r\n//                 <td style={{ padding: '8px', border: '1px solid #ddd' }}>\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     value={input.quantité}\r\n//                     onChange={e => handleQuantityChange(e, index)}\r\n//                     style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}\r\n//                   />\r\n//                 </td>\r\n//                 <td style={{ padding: '8px', border: '1px solid #ddd' }}>\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     value={input.price}\r\n//                     readOnly\r\n//                     style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd', backgroundColor: '#f9f9f9' }}\r\n//                   />\r\n//                 </td>\r\n//                 <td style={{ padding: '8px', border: '1px solid #ddd' }}>\r\n//                   <input\r\n//                     type=\"text\"\r\n//                     value={input.remise}\r\n//                     onChange={e => handleRemiseChange(e, index)}\r\n//                     ref={remiseInputRef}\r\n//                     onKeyPress={handleKeyPress}\r\n//                     style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ddd' }}\r\n//                   />\r\n//                 </td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//         <button type=\"button\" onClick={handleAddInput} style={{ padding: '10px 20px', borderRadius: '4px', border: 'none', backgroundColor: '#007bff', color: '#fff', cursor: 'pointer', marginBottom: '15px' }}>\r\n//           Ajouter une ligne\r\n//         </button>\r\n//         <p style={{ fontSize: '16px', fontWeight: 'bold' }}>Total: {calculateTotal()} DT</p>\r\n//         <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n//           <button type=\"submit\" style={{ padding: '10px 20px', borderRadius: '4px', border: 'none', backgroundColor: '#28a745', color: '#fff', cursor: 'pointer' }}>\r\n//             {selectedFacture ? 'Mettre à jour la facture' : 'Créer la facture'}\r\n//           </button>\r\n//           {/* <button type=\"button\" onClick={handleClear} style={{ padding: '10px 20px', borderRadius: '4px', border: 'none', backgroundColor: '#dc3545', color: '#fff', cursor: 'pointer' }}>\r\n//             Effacer\r\n//           </button> */}\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Cfvbscfa;\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import axios from 'axios';\r\n\r\n// function Cfvbscfa({ selectedFacture }) {\r\n//   const [clName, setClName] = useState('');\r\n//   const [client_id, setClientCode] = useState('');\r\n//   const [date, setDate] = useState('');\r\n//   const [DT, setDT] = useState('1.000');\r\n//   const [inputs, setInputs] = useState([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//   const [references, setReferences] = useState([]);\r\n//   const [filteredClients, setFilteredClients] = useState([]);\r\n//   const [articles, setArticles] = useState([]);\r\n//   const [filteredArticles, setFilteredArticles] = useState([]);\r\n\r\n//   const remiseInputRef = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     axios.get('http://localhost:7777/articlesbsvcf')\r\n//       .then(res => {\r\n//         console.log('Fetched Articles:', res.data);\r\n//         const parsedArticles = res.data;\r\n//         setArticles(parsedArticles);\r\n//         setReferences(parsedArticles.map(article => article.refAr));\r\n//       })\r\n//       .catch(err => console.log('Error fetching articles:', err));\r\n//   }, []);\r\n  \r\n//   useEffect(() => {\r\n//     if (selectedFacture) {\r\n//       console.log('Selected Facture in CreateFactureVente:', selectedFacture);\r\n//       setClName(selectedFacture.clName || '');\r\n//       setClientCode(selectedFacture.client_id || '');\r\n//       setDate(selectedFacture.date || '');\r\n//       setDT(selectedFacture.DT || '1.000');\r\n//       setInputs(selectedFacture.articles || [{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//     }\r\n//   }, [selectedFacture]);\r\n\r\n//   const fetchPriceByReference = (reference, index) => {\r\n//     axios.get(`http://localhost:7777/cfvbscf/${reference}`)\r\n//       .then(res => {\r\n//         const price = res.data.price;\r\n//         const newInputs = [...inputs];\r\n//         newInputs[index].price = price;\r\n//         setInputs(newInputs);\r\n//       })\r\n//       .catch(err => console.log('Error fetching price:', err));\r\n//   };\r\n\r\n//   const handleReferenceChange = (event, index) => {\r\n//     const { value } = event.target;\r\n//     const newInputs = [...inputs];\r\n//     newInputs[index].refAr = value;\r\n//     setInputs(newInputs);\r\n//     fetchPriceByReference(value, index);\r\n//   };\r\n\r\n//   const handleRemiseChange = (event, index) => {\r\n//     const { value } = event.target;\r\n//     const newInputs = [...inputs];\r\n//     newInputs[index].remise = value;\r\n//     setInputs(newInputs);\r\n//   };\r\n\r\n//   const handleQuantityChange = (event, index) => {\r\n//     const { value } = event.target;\r\n//     const newInputs = [...inputs];\r\n//     newInputs[index].quantité = value;\r\n\r\n//     if (!isNaN(value) && value !== '') {\r\n//       axios.get(`http://localhost:7777/article/${newInputs[index].refAr}/quantity`)\r\n//         .then(res => {\r\n//           const availableQuantity = res.data.quantity;\r\n//           const remainingQuantity = availableQuantity - parseInt(value);\r\n\r\n//           if (remainingQuantity < 0) {\r\n//             alert(`La quantité souhaitée n'est pas suffisante, vous n'avez que ${availableQuantity} pièces de cet article`);\r\n//             newInputs[index].quantité = availableQuantity; \r\n//           }\r\n\r\n//           setInputs(newInputs);\r\n//         })\r\n//         .catch(err => console.error('Error fetching quantity:', err));\r\n//     } else {\r\n//       alert('Veuillez entrer une quantité valide.');\r\n//     }\r\n//   };\r\n\r\n//   const handleAddInput = () => {\r\n//     const isEmpty = inputs.some(input => input.refAr === '' || input.quantité === '' || input.remise === '');\r\n//     if (isEmpty) {\r\n//       alert(\"Veuillez remplir tous les champs de la ligne précédente avant d'ajouter une nouvelle ligne.\");\r\n//       return;\r\n//     }\r\n//     setInputs([...inputs, { refAr: '', price: 0, quantité: '', remise: 0 }]);\r\n//   };\r\n\r\n//   const calculateTotal = () => {\r\n//     if (!inputs) return 0;\r\n//     const total = inputs.reduce((acc, curr) => acc + (curr.price * curr.quantité) * (1 - (curr.remise / 100)), 0) + parseFloat(DT);\r\n//     return total.toFixed(3);\r\n//   };\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n  \r\n//     const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\r\n//     const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\r\n  \r\n//     if (invalidReference) {\r\n//       alert(\"Sélectionner une référence valide\");\r\n//       return;\r\n//     }\r\n  \r\n//     const refArArray = nonEmptyInputs.map(input => ({\r\n//       refAr: input.refAr,\r\n//       price: input.price,\r\n//       quantité: input.quantité,\r\n//       remise: input.remise\r\n//     }));\r\n  \r\n//     const totalPrice = calculateTotal();\r\n//     try {\r\n//       console.log('Submitting data:', {\r\n//         clName,\r\n//         client_id,\r\n//         date,\r\n//         DT,\r\n//         refAr: refArArray,\r\n//         totalPrice\r\n//       });\r\n  \r\n//       const res = await axios.post('http://localhost:7777/cfvbscf/', {\r\n//         clName,\r\n//         client_id,\r\n//         date,\r\n//         DT,\r\n//         refAr: refArArray,\r\n//         totalPrice\r\n//       });\r\n  \r\n//       console.log('Response:', res.data);\r\n//       handleClear(); \r\n//       window.location.reload();\r\n//     } catch (err) {\r\n//       console.error('Error creating facture:', err.response ? err.response.data : err);\r\n//     }\r\n//   };\r\n  \r\n\r\n//   const handleKeyPress = (event) => {\r\n//     if (event.key === 'Enter') {\r\n//       handleAddInput();\r\n//     }\r\n//   };\r\n\r\n//   const handleClientSelect = (name, code) => {\r\n//     setClName(name);\r\n//     setClientCode(code);\r\n//     setFilteredClients([]);\r\n//   };\r\n\r\n//   const handleClientChange = (e) => {\r\n//     const { value } = e.target;\r\n//     setClName(value);\r\n\r\n//     axios.get(`http://localhost:7777/clients/search?name=${value}`)\r\n//       .then(res => {\r\n//         setFilteredClients(res.data);\r\n//       })\r\n//       .catch(err => console.log('Error fetching clients:', err));\r\n\r\n//     axios.get(`http://localhost:7777/clients/search?name=${value}`)\r\n//       .then(res => {\r\n//         if (res.data.length > 0) {\r\n//           setClientCode(res.data[0].clID);\r\n//         } else {\r\n//           setClientCode('');\r\n//         }\r\n//       })\r\n//       .catch(err => console.log('Error fetching client code:', err));\r\n\r\n//     // Filter articles based on client name\r\n//     const filtered = articles.filter(article =>\r\n//       article.clName && article.clName.toLowerCase().includes(value.toLowerCase())\r\n//     );\r\n//     setFilteredArticles(filtered);\r\n//   };\r\n\r\n//   const handleClientBlur = () => {\r\n//     setFilteredClients([]);\r\n//   };\r\n\r\n//   const handleClientCodeChange = (e) => {\r\n//     const { value } = e.target;\r\n//     setClientCode(value);\r\n\r\n//     axios.get(`http://localhost:7777/clients/search?id=${value}`)\r\n//       .then(res => {\r\n//         if (res.data.length > 0) {\r\n//           setClName(res.data[0].clName);\r\n//         } else {\r\n//           setClName('');\r\n//         }\r\n//       })\r\n//       .catch(err => console.log('Error fetching client name:', err));\r\n\r\n//     // Filter articles based on client code\r\n//     const filtered = articles.filter(article =>\r\n//       article.client_id && article.client_id.toLowerCase().includes(value.toLowerCase())\r\n//     );\r\n//     setFilteredArticles(filtered);\r\n//   };\r\n\r\n//   const handleUpdate = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     const nonEmptyInputs = inputs.filter(input => input.refAr !== '' && input.quantité !== '' && input.remise !== '');\r\n//     const invalidReference = nonEmptyInputs.some(input => !references.includes(input.refAr));\r\n\r\n//     if (invalidReference) {\r\n//       alert(\"Sélectionner une référence valide\");\r\n//       return;\r\n//     }\r\n\r\n//     const refArArray = nonEmptyInputs.map(input => ({\r\n//       refAr: input.refAr,\r\n//       price: input.price,\r\n//       quantité: input.quantité,\r\n//       remise: input.remise\r\n//     }));\r\n\r\n//     const totalPrice = calculateTotal();\r\n//     try {\r\n//       const res = await axios.put(`http://localhost:7777/cfvbscf/update/${selectedFacture.id}`, {\r\n//         clName,\r\n//         client_id,\r\n//         date,\r\n//         DT,\r\n//         articles: refArArray,\r\n//         totalPrice\r\n//       });\r\n//       console.log(res.data);\r\n//       window.location.reload();\r\n//     } catch (err) {\r\n//       console.log('Error updating facture:', err);\r\n//     }\r\n//   };\r\n  \r\n//   const handleClear = () => {\r\n//     setClName('');\r\n//     setClientCode('');\r\n//     setDate('');\r\n//     setDT('1.000');\r\n//     setInputs([{ refAr: '', quantité: '', price: 0, remise: 0 }]);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ margin: '20px', display: 'flex', flexDirection: 'column', alignItems: 'center', fontFamily: 'Arial, sans-serif', backgroundColor: '#f9f9f9', padding: '20px', borderRadius: '8px', boxShadow: '0 2px 4px rgba(0,0,0,0.1)' }}>\r\n//       <h2 style={{ marginBottom: '20px' }}>Création Facture Vente</h2>\r\n//       <form onSubmit={selectedFacture ? handleUpdate : handleSubmit} style={{ width: '100%', maxWidth: '800px' }}>\r\n//         <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '10px' }}>\r\n//           <div style={{ width: '48%' }}>\r\n//             <label htmlFor=\"clName\" style={{ display: 'block', marginBottom: '5px' }}>Nom Client</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               id=\"clName\"\r\n//               value={clName}\r\n//               onChange={handleClientChange}\r\n//               onBlur={handleClientBlur}\r\n//               style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\r\n//               list=\"clientSuggestions\"\r\n//               required\r\n//             />\r\n//             <datalist id=\"clientSuggestions\">\r\n//               {filteredClients.map((client, index) => (\r\n//                 <option key={index} value={client.clName} onClick={() => handleClientSelect(client.clName, client.clID)} />\r\n//               ))}\r\n//             </datalist>\r\n//           </div>\r\n//           <div style={{ width: '48%' }}>\r\n//             <label htmlFor=\"clientCode\" style={{ display: 'block', marginBottom: '5px' }}>Code Client</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               id=\"clientCode\"\r\n//               value={client_id}\r\n//               onChange={handleClientCodeChange}\r\n//               style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\r\n//               required\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '10px' }}>\r\n//           <div style={{ width: '48%' }}>\r\n//             <label htmlFor=\"date\" style={{ display: 'block', marginBottom: '5px' }}>Date</label>\r\n//             <input\r\n//               type=\"date\"\r\n//               id=\"date\"\r\n//               value={date}\r\n//               onChange={e => setDate(e.target.value)}\r\n//               style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\r\n//               required\r\n//             />\r\n//           </div>\r\n//           <div style={{ width: '48%' }}>\r\n//             <label htmlFor=\"DT\" style={{ display: 'block', marginBottom: '5px' }}>DT</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               id=\"DT\"\r\n//               value={DT}\r\n//               onChange={e => setDT(e.target.value)}\r\n//               style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\r\n//               required\r\n//             />\r\n//           </div>\r\n//         </div>\r\n//         <div style={{ marginBottom: '10px' }}>\r\n//           <label style={{ display: 'block', marginBottom: '5px' }}>Articles</label>\r\n//           {inputs.map((input, index) => (\r\n//             <div key={index} style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '10px' }}>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={input.refAr}\r\n//                 onChange={e => handleReferenceChange(e, index)}\r\n//                 placeholder=\"Référence\"\r\n//                 list=\"articleReferences\"\r\n//                 style={{ width: '24%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\r\n//                 required\r\n//               />\r\n//               <datalist id=\"articleReferences\">\r\n//                 {references.map((reference, index) => (\r\n//                   <option key={index} value={reference} />\r\n//                 ))}\r\n//               </datalist>\r\n//               <input\r\n//                 type=\"number\"\r\n//                 value={input.price}\r\n//                 placeholder=\"Prix\"\r\n//                 readOnly\r\n//                 style={{ width: '24%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\r\n//               />\r\n//               <input\r\n//                 type=\"number\"\r\n//                 value={input.quantité}\r\n//                 onChange={e => handleQuantityChange(e, index)}\r\n//                 placeholder=\"Quantité\"\r\n//                 style={{ width: '24%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\r\n//                 required\r\n//               />\r\n//               <input\r\n//                 type=\"number\"\r\n//                 value={input.remise}\r\n//                 onChange={e => handleRemiseChange(e, index)}\r\n//                 placeholder=\"Remise (%)\"\r\n//                 style={{ width: '24%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\r\n//                 required\r\n//                 onKeyDown={handleKeyPress}\r\n//                 ref={remiseInputRef}\r\n//               />\r\n//             </div>\r\n//           ))}\r\n//           <button type=\"button\" onClick={handleAddInput} style={{ padding: '8px 12px', borderRadius: '4px', backgroundColor: '#007bff', color: '#fff', border: 'none', cursor: 'pointer' }}>\r\n//             Ajouter une ligne\r\n//           </button>\r\n//         </div>\r\n//         <div style={{ marginBottom: '10px' }}>\r\n//           <label htmlFor=\"total\" style={{ display: 'block', marginBottom: '5px' }}>Total</label>\r\n//           <input\r\n//             type=\"text\"\r\n//             id=\"total\"\r\n//             value={calculateTotal()}\r\n//             readOnly\r\n//             style={{ width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc' }}\r\n//           />\r\n//         </div>\r\n//         <button type=\"submit\" style={{ padding: '10px 15px', borderRadius: '4px', backgroundColor: '#28a745', color: '#fff', border: 'none', cursor: 'pointer' }}>\r\n//           {selectedFacture ? 'Mettre à jour' : 'Soumettre'}\r\n//         </button>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Cfvbscfa;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}